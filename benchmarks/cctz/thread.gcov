        -:    0:Source:/usr/include/c++/4.9/thread
        -:    0:Graph:/home/yfy/iut/benchmarks/cctz/time_zone_lookup_test.gcno
        -:    0:Data:/home/yfy/iut/benchmarks/cctz/time_zone_lookup_test.gcda
        -:    0:Runs:28
        -:    0:Programs:1
        -:    1:// <thread> -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2008-2014 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file include/thread
        -:   26: *  This is a Standard C++ Library header.
        -:   27: */
        -:   28:
        -:   29:#ifndef _GLIBCXX_THREAD
        -:   30:#define _GLIBCXX_THREAD 1
        -:   31:
        -:   32:#pragma GCC system_header
        -:   33:
        -:   34:#if __cplusplus < 201103L
        -:   35:# include <bits/c++0x_warning.h>
        -:   36:#else
        -:   37:
        -:   38:#include <chrono>
        -:   39:#include <functional>
        -:   40:#include <memory>
        -:   41:#include <bits/functexcept.h>
        -:   42:#include <bits/functional_hash.h>
        -:   43:#include <bits/gthr.h>
        -:   44:
        -:   45:#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)
        -:   46:
        -:   47:namespace std _GLIBCXX_VISIBILITY(default)
        -:   48:{
        -:   49:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   50:
        -:   51:  /**
        -:   52:   * @defgroup threads Threads
        -:   53:   * @ingroup concurrency
        -:   54:   *
        -:   55:   * Classes for thread support.
        -:   56:   * @{
        -:   57:   */
        -:   58:
        -:   59:  /// thread
        -:   60:  class thread
        -:   61:  {
        -:   62:  public:
        -:   63:    typedef __gthread_t			native_handle_type;
        -:   64:    struct _Impl_base;
        -:   65:    typedef shared_ptr<_Impl_base>	__shared_base_type;
        -:   66:
        -:   67:    /// thread::id
        -:   68:    class id
        -:   69:    {
        -:   70:      native_handle_type	_M_thread;
        -:   71:
        -:   72:    public:
     1022:   73:      id() noexcept : _M_thread() { }
        -:   74:
        -:   75:      explicit
        -:   76:      id(native_handle_type __id) : _M_thread(__id) { }
        -:   77:
        -:   78:    private:
        -:   79:      friend class thread;
        -:   80:      friend class hash<thread::id>;
        -:   81:
        -:   82:      friend bool
        -:   83:      operator==(thread::id __x, thread::id __y) noexcept
        -:   84:      { return __gthread_equal(__x._M_thread, __y._M_thread); }
        -:   85:
        -:   86:      friend bool
        -:   87:      operator<(thread::id __x, thread::id __y) noexcept
        -:   88:      { return __x._M_thread < __y._M_thread; }
        -:   89:
        -:   90:      template<class _CharT, class _Traits>
        -:   91:	friend basic_ostream<_CharT, _Traits>&
        -:   92:	operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id);
        -:   93:    };
        -:   94:
        -:   95:    // Simple base type that the templatized, derived class containing
        -:   96:    // an arbitrary functor can be converted to and called.
     1536:   97:    struct _Impl_base
        -:   98:    {
        -:   99:      __shared_base_type	_M_this_ptr;
        -:  100:
        -:  101:      inline virtual ~_Impl_base();
        -:  102:
        -:  103:      virtual void _M_run() = 0;
        -:  104:    };
        -:  105:
        -:  106:    template<typename _Callable>
function _ZNSt6thread5_ImplISt12_Bind_simpleIFZN4cctz36TimeZones_LoadZonesConcurrently_Test8TestBodyEvEUlPSt7promiseIvEE_S6_EEED0Ev called 0 returned 0% blocks executed 0%
function _ZNSt6thread5_ImplISt12_Bind_simpleIFZN4cctz36TimeZones_LoadZonesConcurrently_Test8TestBodyEvEUlPSt7promiseIvEE_S6_EEED2Ev called 512 returned 100% blocks executed 80%
     1024:  107:      struct _Impl : public _Impl_base
call    0 never executed
call    1 never executed
        -:  108:      {
        -:  109:	_Callable		_M_func;
        -:  110:
      512:  111:	_Impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))
        -:  112:	{ }
        -:  113:
        -:  114:	void
function _ZNSt6thread5_ImplISt12_Bind_simpleIFZN4cctz36TimeZones_LoadZonesConcurrently_Test8TestBodyEvEUlPSt7promiseIvEE_S6_EEE6_M_runEv called 512 returned 100% blocks executed 100%
     1024:  115:	_M_run() { _M_func(); }
        -:  116:      };
        -:  117:
        -:  118:  private:
        -:  119:    id				_M_id;
        -:  120:
        -:  121:  public:
        -:  122:    thread() noexcept = default;
        -:  123:    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  124:    // 2097.  packaged_task constructors should be constrained
        -:  125:    thread(thread&) = delete;
        -:  126:    thread(const thread&) = delete;
        -:  127:
        -:  128:    thread(thread&& __t) noexcept
        -:  129:    { swap(__t); }
        -:  130:
        -:  131:    template<typename _Callable, typename... _Args>
        -:  132:      explicit 
function _ZNSt6threadC2IRZN4cctz36TimeZones_LoadZonesConcurrently_Test8TestBodyEvEUlPSt7promiseIvEE_IS5_EEEOT_DpOT0_ called 512 returned 100% blocks executed 50%
      512:  133:      thread(_Callable&& __f, _Args&&... __args)
        -:  134:      {
        -:  135:#ifdef GTHR_ACTIVE_PROXY
      512:  136:	__asm ("" : : "r" (&pthread_create));
call    0 returned 100%
        -:  137:#endif
     2560:  138:        _M_start_thread(_M_make_routine(std::__bind_simple(
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  139:                std::forward<_Callable>(__f),
        -:  140:                std::forward<_Args>(__args)...)));
      512:  141:      }
        -:  142:
        -:  143:    ~thread()
        -:  144:    {
     1022:  145:      if (joinable())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  146:	std::terminate();
call    0 never executed
call    1 never executed
call    2 never executed
     1022:  147:    }
        -:  148:
        -:  149:    thread& operator=(const thread&) = delete;
        -:  150:
        -:  151:    thread& operator=(thread&& __t) noexcept
        -:  152:    {
        -:  153:      if (joinable())
        -:  154:	std::terminate();
        -:  155:      swap(__t);
        -:  156:      return *this;
        -:  157:    }
        -:  158:
        -:  159:    void
        -:  160:    swap(thread& __t) noexcept
        -:  161:    { std::swap(_M_id, __t._M_id); }
        -:  162:
        -:  163:    bool
        -:  164:    joinable() const noexcept
        -:  165:    { return !(_M_id == id()); }
        -:  166:
        -:  167:    void
        -:  168:    join();
        -:  169:
        -:  170:    void
        -:  171:    detach();
        -:  172:
        -:  173:    thread::id
        -:  174:    get_id() const noexcept
        -:  175:    { return _M_id; }
        -:  176:
        -:  177:    /** @pre thread is joinable
        -:  178:     */
        -:  179:    native_handle_type
        -:  180:    native_handle()
        -:  181:    { return _M_id._M_thread; }
        -:  182:
        -:  183:    // Returns a value that hints at the number of hardware thread contexts.
        -:  184:    static unsigned int
        -:  185:    hardware_concurrency() noexcept;
        -:  186:
        -:  187:  private:
        -:  188:    void
        -:  189:    _M_start_thread(__shared_base_type);
        -:  190:
        -:  191:    template<typename _Callable>
        -:  192:      shared_ptr<_Impl<_Callable>>
        -:  193:      _M_make_routine(_Callable&& __f)
        -:  194:      {
        -:  195:	// Create and allocate full data structure, not base.
        -:  196:	return std::make_shared<_Impl<_Callable>>(std::forward<_Callable>(__f));
        -:  197:      }
        -:  198:  };
        -:  199:
        -:  200:  inline thread::_Impl_base::~_Impl_base() = default;
        -:  201:
        -:  202:  inline void
        -:  203:  swap(thread& __x, thread& __y) noexcept
        -:  204:  { __x.swap(__y); }
        -:  205:
        -:  206:  inline bool
        -:  207:  operator!=(thread::id __x, thread::id __y) noexcept
        -:  208:  { return !(__x == __y); }
        -:  209:
        -:  210:  inline bool
        -:  211:  operator<=(thread::id __x, thread::id __y) noexcept
        -:  212:  { return !(__y < __x); }
        -:  213:
        -:  214:  inline bool
        -:  215:  operator>(thread::id __x, thread::id __y) noexcept
        -:  216:  { return __y < __x; }
        -:  217:
        -:  218:  inline bool
        -:  219:  operator>=(thread::id __x, thread::id __y) noexcept
        -:  220:  { return !(__x < __y); }
        -:  221:
        -:  222:  // DR 889.
        -:  223:  /// std::hash specialization for thread::id.
        -:  224:  template<>
        -:  225:    struct hash<thread::id>
        -:  226:    : public __hash_base<size_t, thread::id>
        -:  227:    {
        -:  228:      size_t
        -:  229:      operator()(const thread::id& __id) const noexcept
        -:  230:      { return std::_Hash_impl::hash(__id._M_thread); }
        -:  231:    };
        -:  232:
        -:  233:  template<class _CharT, class _Traits>
        -:  234:    inline basic_ostream<_CharT, _Traits>&
        -:  235:    operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id)
        -:  236:    {
        -:  237:      if (__id == thread::id())
        -:  238:	return __out << "thread::id of a non-executing thread";
        -:  239:      else
        -:  240:	return __out << __id._M_thread;
        -:  241:    }
        -:  242:
        -:  243:_GLIBCXX_END_NAMESPACE_VERSION
        -:  244:
        -:  245:  /** @namespace std::this_thread
        -:  246:   *  @brief ISO C++ 2011 entities sub-namespace for thread.
        -:  247:   *  30.3.2 Namespace this_thread.
        -:  248:   */
        -:  249:  namespace this_thread
        -:  250:  {
        -:  251:  _GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:  252:
        -:  253:    /// get_id
        -:  254:    inline thread::id
        -:  255:    get_id() noexcept { return thread::id(__gthread_self()); }
        -:  256:
        -:  257:    /// yield
        -:  258:    inline void
        -:  259:    yield() noexcept
        -:  260:    {
        -:  261:#ifdef _GLIBCXX_USE_SCHED_YIELD
        -:  262:      __gthread_yield();
        -:  263:#endif
        -:  264:    }
        -:  265:
        -:  266:    void
        -:  267:    __sleep_for(chrono::seconds, chrono::nanoseconds);
        -:  268:
        -:  269:    /// sleep_for
        -:  270:    template<typename _Rep, typename _Period>
        -:  271:      inline void
        -:  272:      sleep_for(const chrono::duration<_Rep, _Period>& __rtime)
        -:  273:      {
        -:  274:	auto __s = chrono::duration_cast<chrono::seconds>(__rtime);
        -:  275:	auto __ns = chrono::duration_cast<chrono::nanoseconds>(__rtime - __s);
        -:  276:#ifdef _GLIBCXX_USE_NANOSLEEP
        -:  277:	__gthread_time_t __ts =
        -:  278:	  {
        -:  279:	    static_cast<std::time_t>(__s.count()),
        -:  280:	    static_cast<long>(__ns.count())
        -:  281:	  };
        -:  282:	::nanosleep(&__ts, 0);
        -:  283:#else
        -:  284:	__sleep_for(__s, __ns);
        -:  285:#endif
        -:  286:      }
        -:  287:
        -:  288:    /// sleep_until
        -:  289:    template<typename _Clock, typename _Duration>
        -:  290:      inline void
        -:  291:      sleep_until(const chrono::time_point<_Clock, _Duration>& __atime)
        -:  292:      { sleep_for(__atime - _Clock::now()); }
        -:  293:
        -:  294:  _GLIBCXX_END_NAMESPACE_VERSION
        -:  295:  }
        -:  296:
        -:  297:  // @} group threads
        -:  298:
        -:  299:} // namespace
        -:  300:
        -:  301:#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1
        -:  302:
        -:  303:#endif // C++11
        -:  304:
        -:  305:#endif // _GLIBCXX_THREAD
