        -:    0:Source:/usr/include/gtest/internal/gtest-port.h
        -:    0:Graph:/home/yfy/iut/benchmarks/cctz/civil_time_test.gcno
        -:    0:Data:/home/yfy/iut/benchmarks/cctz/civil_time_test.gcda
        -:    0:Runs:22
        -:    0:Programs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29://
        -:   30:// Authors: wan@google.com (Zhanyong Wan)
        -:   31://
        -:   32:// Low-level types and utilities for porting Google Test to various
        -:   33:// platforms.  They are subject to change without notice.  DO NOT USE
        -:   34:// THEM IN USER CODE.
        -:   35://
        -:   36:// This file is fundamental to Google Test.  All other Google Test source
        -:   37:// files are expected to #include this.  Therefore, it cannot #include
        -:   38:// any other Google Test header.
        -:   39:
        -:   40:#ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
        -:   41:#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
        -:   42:
        -:   43:// The user can define the following macros in the build script to
        -:   44:// control Google Test's behavior.  If the user doesn't define a macro
        -:   45:// in this list, Google Test will define it.
        -:   46://
        -:   47://   GTEST_HAS_CLONE          - Define it to 1/0 to indicate that clone(2)
        -:   48://                              is/isn't available.
        -:   49://   GTEST_HAS_EXCEPTIONS     - Define it to 1/0 to indicate that exceptions
        -:   50://                              are enabled.
        -:   51://   GTEST_HAS_GLOBAL_STRING  - Define it to 1/0 to indicate that ::string
        -:   52://                              is/isn't available (some systems define
        -:   53://                              ::string, which is different to std::string).
        -:   54://   GTEST_HAS_GLOBAL_WSTRING - Define it to 1/0 to indicate that ::string
        -:   55://                              is/isn't available (some systems define
        -:   56://                              ::wstring, which is different to std::wstring).
        -:   57://   GTEST_HAS_POSIX_RE       - Define it to 1/0 to indicate that POSIX regular
        -:   58://                              expressions are/aren't available.
        -:   59://   GTEST_HAS_PTHREAD        - Define it to 1/0 to indicate that <pthread.h>
        -:   60://                              is/isn't available.
        -:   61://   GTEST_HAS_RTTI           - Define it to 1/0 to indicate that RTTI is/isn't
        -:   62://                              enabled.
        -:   63://   GTEST_HAS_STD_WSTRING    - Define it to 1/0 to indicate that
        -:   64://                              std::wstring does/doesn't work (Google Test can
        -:   65://                              be used where std::wstring is unavailable).
        -:   66://   GTEST_HAS_TR1_TUPLE      - Define it to 1/0 to indicate tr1::tuple
        -:   67://                              is/isn't available.
        -:   68://   GTEST_HAS_SEH            - Define it to 1/0 to indicate whether the
        -:   69://                              compiler supports Microsoft's "Structured
        -:   70://                              Exception Handling".
        -:   71://   GTEST_HAS_STREAM_REDIRECTION
        -:   72://                            - Define it to 1/0 to indicate whether the
        -:   73://                              platform supports I/O stream redirection using
        -:   74://                              dup() and dup2().
        -:   75://   GTEST_USE_OWN_TR1_TUPLE  - Define it to 1/0 to indicate whether Google
        -:   76://                              Test's own tr1 tuple implementation should be
        -:   77://                              used.  Unused when the user sets
        -:   78://                              GTEST_HAS_TR1_TUPLE to 0.
        -:   79://   GTEST_LANG_CXX11         - Define it to 1/0 to indicate that Google Test
        -:   80://                              is building in C++11/C++98 mode.
        -:   81://   GTEST_LINKED_AS_SHARED_LIBRARY
        -:   82://                            - Define to 1 when compiling tests that use
        -:   83://                              Google Test as a shared library (known as
        -:   84://                              DLL on Windows).
        -:   85://   GTEST_CREATE_SHARED_LIBRARY
        -:   86://                            - Define to 1 when compiling Google Test itself
        -:   87://                              as a shared library.
        -:   88:
        -:   89:// This header defines the following utilities:
        -:   90://
        -:   91:// Macros indicating the current platform (defined to 1 if compiled on
        -:   92:// the given platform; otherwise undefined):
        -:   93://   GTEST_OS_AIX      - IBM AIX
        -:   94://   GTEST_OS_CYGWIN   - Cygwin
        -:   95://   GTEST_OS_HPUX     - HP-UX
        -:   96://   GTEST_OS_LINUX    - Linux
        -:   97://     GTEST_OS_LINUX_ANDROID - Google Android
        -:   98://   GTEST_OS_MAC      - Mac OS X
        -:   99://     GTEST_OS_IOS    - iOS
        -:  100://       GTEST_OS_IOS_SIMULATOR - iOS simulator
        -:  101://   GTEST_OS_NACL     - Google Native Client (NaCl)
        -:  102://   GTEST_OS_OPENBSD  - OpenBSD
        -:  103://   GTEST_OS_QNX      - QNX
        -:  104://   GTEST_OS_SOLARIS  - Sun Solaris
        -:  105://   GTEST_OS_SYMBIAN  - Symbian
        -:  106://   GTEST_OS_WINDOWS  - Windows (Desktop, MinGW, or Mobile)
        -:  107://     GTEST_OS_WINDOWS_DESKTOP  - Windows Desktop
        -:  108://     GTEST_OS_WINDOWS_MINGW    - MinGW
        -:  109://     GTEST_OS_WINDOWS_MOBILE   - Windows Mobile
        -:  110://   GTEST_OS_ZOS      - z/OS
        -:  111://
        -:  112:// Among the platforms, Cygwin, Linux, Max OS X, and Windows have the
        -:  113:// most stable support.  Since core members of the Google Test project
        -:  114:// don't have access to other platforms, support for them may be less
        -:  115:// stable.  If you notice any problems on your platform, please notify
        -:  116:// googletestframework@googlegroups.com (patches for fixing them are
        -:  117:// even more welcome!).
        -:  118://
        -:  119:// Note that it is possible that none of the GTEST_OS_* macros are defined.
        -:  120://
        -:  121:// Macros indicating available Google Test features (defined to 1 if
        -:  122:// the corresponding feature is supported; otherwise undefined):
        -:  123://   GTEST_HAS_COMBINE      - the Combine() function (for value-parameterized
        -:  124://                            tests)
        -:  125://   GTEST_HAS_DEATH_TEST   - death tests
        -:  126://   GTEST_HAS_PARAM_TEST   - value-parameterized tests
        -:  127://   GTEST_HAS_TYPED_TEST   - typed tests
        -:  128://   GTEST_HAS_TYPED_TEST_P - type-parameterized tests
        -:  129://   GTEST_USES_POSIX_RE    - enhanced POSIX regex is used. Do not confuse with
        -:  130://                            GTEST_HAS_POSIX_RE (see above) which users can
        -:  131://                            define themselves.
        -:  132://   GTEST_USES_SIMPLE_RE   - our own simple regex is used;
        -:  133://                            the above two are mutually exclusive.
        -:  134://   GTEST_CAN_COMPARE_NULL - accepts untyped NULL in EXPECT_EQ().
        -:  135://
        -:  136:// Macros for basic C++ coding:
        -:  137://   GTEST_AMBIGUOUS_ELSE_BLOCKER_ - for disabling a gcc warning.
        -:  138://   GTEST_ATTRIBUTE_UNUSED_  - declares that a class' instances or a
        -:  139://                              variable don't have to be used.
        -:  140://   GTEST_DISALLOW_ASSIGN_   - disables operator=.
        -:  141://   GTEST_DISALLOW_COPY_AND_ASSIGN_ - disables copy ctor and operator=.
        -:  142://   GTEST_MUST_USE_RESULT_   - declares that a function's result must be used.
        -:  143://
        -:  144:// Synchronization:
        -:  145://   Mutex, MutexLock, ThreadLocal, GetThreadCount()
        -:  146://                  - synchronization primitives.
        -:  147://   GTEST_IS_THREADSAFE - defined to 1 to indicate that the above
        -:  148://                         synchronization primitives have real implementations
        -:  149://                         and Google Test is thread-safe; or 0 otherwise.
        -:  150://
        -:  151:// Template meta programming:
        -:  152://   is_pointer     - as in TR1; needed on Symbian and IBM XL C/C++ only.
        -:  153://   IteratorTraits - partial implementation of std::iterator_traits, which
        -:  154://                    is not available in libCstd when compiled with Sun C++.
        -:  155://
        -:  156:// Smart pointers:
        -:  157://   scoped_ptr     - as in TR2.
        -:  158://
        -:  159:// Regular expressions:
        -:  160://   RE             - a simple regular expression class using the POSIX
        -:  161://                    Extended Regular Expression syntax on UNIX-like
        -:  162://                    platforms, or a reduced regular exception syntax on
        -:  163://                    other platforms, including Windows.
        -:  164://
        -:  165:// Logging:
        -:  166://   GTEST_LOG_()   - logs messages at the specified severity level.
        -:  167://   LogToStderr()  - directs all log messages to stderr.
        -:  168://   FlushInfoLog() - flushes informational log messages.
        -:  169://
        -:  170:// Stdout and stderr capturing:
        -:  171://   CaptureStdout()     - starts capturing stdout.
        -:  172://   GetCapturedStdout() - stops capturing stdout and returns the captured
        -:  173://                         string.
        -:  174://   CaptureStderr()     - starts capturing stderr.
        -:  175://   GetCapturedStderr() - stops capturing stderr and returns the captured
        -:  176://                         string.
        -:  177://
        -:  178:// Integer types:
        -:  179://   TypeWithSize   - maps an integer to a int type.
        -:  180://   Int32, UInt32, Int64, UInt64, TimeInMillis
        -:  181://                  - integers of known sizes.
        -:  182://   BiggestInt     - the biggest signed integer type.
        -:  183://
        -:  184:// Command-line utilities:
        -:  185://   GTEST_FLAG()       - references a flag.
        -:  186://   GTEST_DECLARE_*()  - declares a flag.
        -:  187://   GTEST_DEFINE_*()   - defines a flag.
        -:  188://   GetInjectableArgvs() - returns the command line as a vector of strings.
        -:  189://
        -:  190:// Environment variable utilities:
        -:  191://   GetEnv()             - gets the value of an environment variable.
        -:  192://   BoolFromGTestEnv()   - parses a bool environment variable.
        -:  193://   Int32FromGTestEnv()  - parses an Int32 environment variable.
        -:  194://   StringFromGTestEnv() - parses a string environment variable.
        -:  195:
        -:  196:#include <ctype.h>   // for isspace, etc
        -:  197:#include <stddef.h>  // for ptrdiff_t
        -:  198:#include <stdlib.h>
        -:  199:#include <stdio.h>
        -:  200:#include <string.h>
        -:  201:#ifndef _WIN32_WCE
        -:  202:# include <sys/types.h>
        -:  203:# include <sys/stat.h>
        -:  204:#endif  // !_WIN32_WCE
        -:  205:
        -:  206:#if defined __APPLE__
        -:  207:# include <AvailabilityMacros.h>
        -:  208:# include <TargetConditionals.h>
        -:  209:#endif
        -:  210:
        -:  211:#include <iostream>  // NOLINT
        -:  212:#include <sstream>  // NOLINT
        -:  213:#include <string>  // NOLINT
        -:  214:
        -:  215:#define GTEST_DEV_EMAIL_ "googletestframework@@googlegroups.com"
        -:  216:#define GTEST_FLAG_PREFIX_ "gtest_"
        -:  217:#define GTEST_FLAG_PREFIX_DASH_ "gtest-"
        -:  218:#define GTEST_FLAG_PREFIX_UPPER_ "GTEST_"
        -:  219:#define GTEST_NAME_ "Google Test"
        -:  220:#define GTEST_PROJECT_URL_ "http://code.google.com/p/googletest/"
        -:  221:
        -:  222:// Determines the version of gcc that is used to compile this.
        -:  223:#ifdef __GNUC__
        -:  224:// 40302 means version 4.3.2.
        -:  225:# define GTEST_GCC_VER_ \
        -:  226:    (__GNUC__*10000 + __GNUC_MINOR__*100 + __GNUC_PATCHLEVEL__)
        -:  227:#endif  // __GNUC__
        -:  228:
        -:  229:// Determines the platform on which Google Test is compiled.
        -:  230:#ifdef __CYGWIN__
        -:  231:# define GTEST_OS_CYGWIN 1
        -:  232:#elif defined __SYMBIAN32__
        -:  233:# define GTEST_OS_SYMBIAN 1
        -:  234:#elif defined _WIN32
        -:  235:# define GTEST_OS_WINDOWS 1
        -:  236:# ifdef _WIN32_WCE
        -:  237:#  define GTEST_OS_WINDOWS_MOBILE 1
        -:  238:# elif defined(__MINGW__) || defined(__MINGW32__)
        -:  239:#  define GTEST_OS_WINDOWS_MINGW 1
        -:  240:# else
        -:  241:#  define GTEST_OS_WINDOWS_DESKTOP 1
        -:  242:# endif  // _WIN32_WCE
        -:  243:#elif defined __APPLE__
        -:  244:# define GTEST_OS_MAC 1
        -:  245:# if TARGET_OS_IPHONE
        -:  246:#  define GTEST_OS_IOS 1
        -:  247:#  if TARGET_IPHONE_SIMULATOR
        -:  248:#   define GTEST_OS_IOS_SIMULATOR 1
        -:  249:#  endif
        -:  250:# endif
        -:  251:#elif defined __linux__
        -:  252:# define GTEST_OS_LINUX 1
        -:  253:# if defined __ANDROID__
        -:  254:#  define GTEST_OS_LINUX_ANDROID 1
        -:  255:# endif
        -:  256:#elif defined __MVS__
        -:  257:# define GTEST_OS_ZOS 1
        -:  258:#elif defined(__sun) && defined(__SVR4)
        -:  259:# define GTEST_OS_SOLARIS 1
        -:  260:#elif defined(_AIX)
        -:  261:# define GTEST_OS_AIX 1
        -:  262:#elif defined(__hpux)
        -:  263:# define GTEST_OS_HPUX 1
        -:  264:#elif defined __native_client__
        -:  265:# define GTEST_OS_NACL 1
        -:  266:#elif defined __OpenBSD__
        -:  267:# define GTEST_OS_OPENBSD 1
        -:  268:#elif defined __QNX__
        -:  269:# define GTEST_OS_QNX 1
        -:  270:#endif  // __CYGWIN__
        -:  271:
        -:  272:#ifndef GTEST_LANG_CXX11
        -:  273:// gcc and clang define __GXX_EXPERIMENTAL_CXX0X__ when
        -:  274:// -std={c,gnu}++{0x,11} is passed.  The C++11 standard specifies a
        -:  275:// value for __cplusplus, and recent versions of clang, gcc, and
        -:  276:// probably other compilers set that too in C++11 mode.
        -:  277:# if __GXX_EXPERIMENTAL_CXX0X__ || __cplusplus >= 201103L
        -:  278:// Compiling in at least C++11 mode.
        -:  279:#  define GTEST_LANG_CXX11 1
        -:  280:# else
        -:  281:#  define GTEST_LANG_CXX11 0
        -:  282:# endif
        -:  283:#endif
        -:  284:
        -:  285:// Brings in definitions for functions used in the testing::internal::posix
        -:  286:// namespace (read, write, close, chdir, isatty, stat). We do not currently
        -:  287:// use them on Windows Mobile.
        -:  288:#if !GTEST_OS_WINDOWS
        -:  289:// This assumes that non-Windows OSes provide unistd.h. For OSes where this
        -:  290:// is not the case, we need to include headers that provide the functions
        -:  291:// mentioned above.
        -:  292:# include <unistd.h>
        -:  293:# include <strings.h>
        -:  294:#elif !GTEST_OS_WINDOWS_MOBILE
        -:  295:# include <direct.h>
        -:  296:# include <io.h>
        -:  297:#endif
        -:  298:
        -:  299:#if GTEST_OS_LINUX_ANDROID
        -:  300:// Used to define __ANDROID_API__ matching the target NDK API level.
        -:  301:#  include <android/api-level.h>  // NOLINT
        -:  302:#endif
        -:  303:
        -:  304:// Defines this to true iff Google Test can use POSIX regular expressions.
        -:  305:#ifndef GTEST_HAS_POSIX_RE
        -:  306:# if GTEST_OS_LINUX_ANDROID
        -:  307:// On Android, <regex.h> is only available starting with Gingerbread.
        -:  308:#  define GTEST_HAS_POSIX_RE (__ANDROID_API__ >= 9)
        -:  309:# else
        -:  310:#  define GTEST_HAS_POSIX_RE (!GTEST_OS_WINDOWS)
        -:  311:# endif
        -:  312:#endif
        -:  313:
        -:  314:#if GTEST_HAS_POSIX_RE
        -:  315:
        -:  316:// On some platforms, <regex.h> needs someone to define size_t, and
        -:  317:// won't compile otherwise.  We can #include it here as we already
        -:  318:// included <stdlib.h>, which is guaranteed to define size_t through
        -:  319:// <stddef.h>.
        -:  320:# include <regex.h>  // NOLINT
        -:  321:
        -:  322:# define GTEST_USES_POSIX_RE 1
        -:  323:
        -:  324:#elif GTEST_OS_WINDOWS
        -:  325:
        -:  326:// <regex.h> is not available on Windows.  Use our own simple regex
        -:  327:// implementation instead.
        -:  328:# define GTEST_USES_SIMPLE_RE 1
        -:  329:
        -:  330:#else
        -:  331:
        -:  332:// <regex.h> may not be available on this platform.  Use our own
        -:  333:// simple regex implementation instead.
        -:  334:# define GTEST_USES_SIMPLE_RE 1
        -:  335:
        -:  336:#endif  // GTEST_HAS_POSIX_RE
        -:  337:
        -:  338:#ifndef GTEST_HAS_EXCEPTIONS
        -:  339:// The user didn't tell us whether exceptions are enabled, so we need
        -:  340:// to figure it out.
        -:  341:# if defined(_MSC_VER) || defined(__BORLANDC__)
        -:  342:// MSVC's and C++Builder's implementations of the STL use the _HAS_EXCEPTIONS
        -:  343:// macro to enable exceptions, so we'll do the same.
        -:  344:// Assumes that exceptions are enabled by default.
        -:  345:#  ifndef _HAS_EXCEPTIONS
        -:  346:#   define _HAS_EXCEPTIONS 1
        -:  347:#  endif  // _HAS_EXCEPTIONS
        -:  348:#  define GTEST_HAS_EXCEPTIONS _HAS_EXCEPTIONS
        -:  349:# elif defined(__GNUC__) && __EXCEPTIONS
        -:  350:// gcc defines __EXCEPTIONS to 1 iff exceptions are enabled.
        -:  351:#  define GTEST_HAS_EXCEPTIONS 1
        -:  352:# elif defined(__SUNPRO_CC)
        -:  353:// Sun Pro CC supports exceptions.  However, there is no compile-time way of
        -:  354:// detecting whether they are enabled or not.  Therefore, we assume that
        -:  355:// they are enabled unless the user tells us otherwise.
        -:  356:#  define GTEST_HAS_EXCEPTIONS 1
        -:  357:# elif defined(__IBMCPP__) && __EXCEPTIONS
        -:  358:// xlC defines __EXCEPTIONS to 1 iff exceptions are enabled.
        -:  359:#  define GTEST_HAS_EXCEPTIONS 1
        -:  360:# elif defined(__HP_aCC)
        -:  361:// Exception handling is in effect by default in HP aCC compiler. It has to
        -:  362:// be turned of by +noeh compiler option if desired.
        -:  363:#  define GTEST_HAS_EXCEPTIONS 1
        -:  364:# else
        -:  365:// For other compilers, we assume exceptions are disabled to be
        -:  366:// conservative.
        -:  367:#  define GTEST_HAS_EXCEPTIONS 0
        -:  368:# endif  // defined(_MSC_VER) || defined(__BORLANDC__)
        -:  369:#endif  // GTEST_HAS_EXCEPTIONS
        -:  370:
        -:  371:#if !defined(GTEST_HAS_STD_STRING)
        -:  372:// Even though we don't use this macro any longer, we keep it in case
        -:  373:// some clients still depend on it.
        -:  374:# define GTEST_HAS_STD_STRING 1
        -:  375:#elif !GTEST_HAS_STD_STRING
        -:  376:// The user told us that ::std::string isn't available.
        -:  377:# error "Google Test cannot be used where ::std::string isn't available."
        -:  378:#endif  // !defined(GTEST_HAS_STD_STRING)
        -:  379:
        -:  380:#ifndef GTEST_HAS_GLOBAL_STRING
        -:  381:// The user didn't tell us whether ::string is available, so we need
        -:  382:// to figure it out.
        -:  383:
        -:  384:# define GTEST_HAS_GLOBAL_STRING 0
        -:  385:
        -:  386:#endif  // GTEST_HAS_GLOBAL_STRING
        -:  387:
        -:  388:#ifndef GTEST_HAS_STD_WSTRING
        -:  389:// The user didn't tell us whether ::std::wstring is available, so we need
        -:  390:// to figure it out.
        -:  391:// TODO(wan@google.com): uses autoconf to detect whether ::std::wstring
        -:  392://   is available.
        -:  393:
        -:  394:// Cygwin 1.7 and below doesn't support ::std::wstring.
        -:  395:// Solaris' libc++ doesn't support it either.  Android has
        -:  396:// no support for it at least as recent as Froyo (2.2).
        -:  397:# define GTEST_HAS_STD_WSTRING \
        -:  398:    (!(GTEST_OS_LINUX_ANDROID || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS))
        -:  399:
        -:  400:#endif  // GTEST_HAS_STD_WSTRING
        -:  401:
        -:  402:#ifndef GTEST_HAS_GLOBAL_WSTRING
        -:  403:// The user didn't tell us whether ::wstring is available, so we need
        -:  404:// to figure it out.
        -:  405:# define GTEST_HAS_GLOBAL_WSTRING \
        -:  406:    (GTEST_HAS_STD_WSTRING && GTEST_HAS_GLOBAL_STRING)
        -:  407:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -:  408:
        -:  409:// Determines whether RTTI is available.
        -:  410:#ifndef GTEST_HAS_RTTI
        -:  411:// The user didn't tell us whether RTTI is enabled, so we need to
        -:  412:// figure it out.
        -:  413:
        -:  414:# ifdef _MSC_VER
        -:  415:
        -:  416:#  ifdef _CPPRTTI  // MSVC defines this macro iff RTTI is enabled.
        -:  417:#   define GTEST_HAS_RTTI 1
        -:  418:#  else
        -:  419:#   define GTEST_HAS_RTTI 0
        -:  420:#  endif
        -:  421:
        -:  422:// Starting with version 4.3.2, gcc defines __GXX_RTTI iff RTTI is enabled.
        -:  423:# elif defined(__GNUC__) && (GTEST_GCC_VER_ >= 40302)
        -:  424:
        -:  425:#  ifdef __GXX_RTTI
        -:  426:// When building against STLport with the Android NDK and with
        -:  427:// -frtti -fno-exceptions, the build fails at link time with undefined
        -:  428:// references to __cxa_bad_typeid. Note sure if STL or toolchain bug,
        -:  429:// so disable RTTI when detected.
        -:  430:#   if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR) && \
        -:  431:       !defined(__EXCEPTIONS)
        -:  432:#    define GTEST_HAS_RTTI 0
        -:  433:#   else
        -:  434:#    define GTEST_HAS_RTTI 1
        -:  435:#   endif  // GTEST_OS_LINUX_ANDROID && __STLPORT_MAJOR && !__EXCEPTIONS
        -:  436:#  else
        -:  437:#   define GTEST_HAS_RTTI 0
        -:  438:#  endif  // __GXX_RTTI
        -:  439:
        -:  440:// Clang defines __GXX_RTTI starting with version 3.0, but its manual recommends
        -:  441:// using has_feature instead. has_feature(cxx_rtti) is supported since 2.7, the
        -:  442:// first version with C++ support.
        -:  443:# elif defined(__clang__)
        -:  444:
        -:  445:#  define GTEST_HAS_RTTI __has_feature(cxx_rtti)
        -:  446:
        -:  447:// Starting with version 9.0 IBM Visual Age defines __RTTI_ALL__ to 1 if
        -:  448:// both the typeid and dynamic_cast features are present.
        -:  449:# elif defined(__IBMCPP__) && (__IBMCPP__ >= 900)
        -:  450:
        -:  451:#  ifdef __RTTI_ALL__
        -:  452:#   define GTEST_HAS_RTTI 1
        -:  453:#  else
        -:  454:#   define GTEST_HAS_RTTI 0
        -:  455:#  endif
        -:  456:
        -:  457:# else
        -:  458:
        -:  459:// For all other compilers, we assume RTTI is enabled.
        -:  460:#  define GTEST_HAS_RTTI 1
        -:  461:
        -:  462:# endif  // _MSC_VER
        -:  463:
        -:  464:#endif  // GTEST_HAS_RTTI
        -:  465:
        -:  466:// It's this header's responsibility to #include <typeinfo> when RTTI
        -:  467:// is enabled.
        -:  468:#if GTEST_HAS_RTTI
        -:  469:# include <typeinfo>
        -:  470:#endif
        -:  471:
        -:  472:// Determines whether Google Test can use the pthreads library.
        -:  473:#ifndef GTEST_HAS_PTHREAD
        -:  474:// The user didn't tell us explicitly, so we assume pthreads support is
        -:  475:// available on Linux and Mac.
        -:  476://
        -:  477:// To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0
        -:  478:// to your compiler flags.
        -:  479:# define GTEST_HAS_PTHREAD (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX \
        -:  480:    || GTEST_OS_QNX)
        -:  481:#endif  // GTEST_HAS_PTHREAD
        -:  482:
        -:  483:#if GTEST_HAS_PTHREAD
        -:  484:// gtest-port.h guarantees to #include <pthread.h> when GTEST_HAS_PTHREAD is
        -:  485:// true.
        -:  486:# include <pthread.h>  // NOLINT
        -:  487:
        -:  488:// For timespec and nanosleep, used below.
        -:  489:# include <time.h>  // NOLINT
        -:  490:#endif
        -:  491:
        -:  492:// Determines whether Google Test can use tr1/tuple.  You can define
        -:  493:// this macro to 0 to prevent Google Test from using tuple (any
        -:  494:// feature depending on tuple with be disabled in this mode).
        -:  495:#ifndef GTEST_HAS_TR1_TUPLE
        -:  496:# if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR)
        -:  497:// STLport, provided with the Android NDK, has neither <tr1/tuple> or <tuple>.
        -:  498:#  define GTEST_HAS_TR1_TUPLE 0
        -:  499:# else
        -:  500:// The user didn't tell us not to do it, so we assume it's OK.
        -:  501:#  define GTEST_HAS_TR1_TUPLE 1
        -:  502:# endif
        -:  503:#endif  // GTEST_HAS_TR1_TUPLE
        -:  504:
        -:  505:// Determines whether Google Test's own tr1 tuple implementation
        -:  506:// should be used.
        -:  507:#ifndef GTEST_USE_OWN_TR1_TUPLE
        -:  508:// The user didn't tell us, so we need to figure it out.
        -:  509:
        -:  510:// We use our own TR1 tuple if we aren't sure the user has an
        -:  511:// implementation of it already.  At this time, libstdc++ 4.0.0+ and
        -:  512:// MSVC 2010 are the only mainstream standard libraries that come
        -:  513:// with a TR1 tuple implementation.  NVIDIA's CUDA NVCC compiler
        -:  514:// pretends to be GCC by defining __GNUC__ and friends, but cannot
        -:  515:// compile GCC's tuple implementation.  MSVC 2008 (9.0) provides TR1
        -:  516:// tuple in a 323 MB Feature Pack download, which we cannot assume the
        -:  517:// user has.  QNX's QCC compiler is a modified GCC but it doesn't
        -:  518:// support TR1 tuple.  libc++ only provides std::tuple, in C++11 mode,
        -:  519:// and it can be used with some compilers that define __GNUC__.
        -:  520:# if (defined(__GNUC__) && !defined(__CUDACC__) && (GTEST_GCC_VER_ >= 40000) \
        -:  521:      && !GTEST_OS_QNX && !defined(_LIBCPP_VERSION)) || _MSC_VER >= 1600
        -:  522:#  define GTEST_ENV_HAS_TR1_TUPLE_ 1
        -:  523:# endif
        -:  524:
        -:  525:// C++11 specifies that <tuple> provides std::tuple. Use that if gtest is used
        -:  526:// in C++11 mode and libstdc++ isn't very old (binaries targeting OS X 10.6
        -:  527:// can build with clang but need to use gcc4.2's libstdc++).
        -:  528:# if GTEST_LANG_CXX11 && (!defined(__GLIBCXX__) || __GLIBCXX__ > 20110325)
        -:  529:#  define GTEST_ENV_HAS_STD_TUPLE_ 1
        -:  530:# endif
        -:  531:
        -:  532:# if GTEST_ENV_HAS_TR1_TUPLE_ || GTEST_ENV_HAS_STD_TUPLE_
        -:  533:#  define GTEST_USE_OWN_TR1_TUPLE 0
        -:  534:# else
        -:  535:#  define GTEST_USE_OWN_TR1_TUPLE 1
        -:  536:# endif
        -:  537:
        -:  538:#endif  // GTEST_USE_OWN_TR1_TUPLE
        -:  539:
        -:  540:// To avoid conditional compilation everywhere, we make it
        -:  541:// gtest-port.h's responsibility to #include the header implementing
        -:  542:// tr1/tuple.
        -:  543:#if GTEST_HAS_TR1_TUPLE
        -:  544:
        -:  545:# if GTEST_USE_OWN_TR1_TUPLE
        -:  546:#  include "gtest/internal/gtest-tuple.h"
        -:  547:# elif GTEST_ENV_HAS_STD_TUPLE_
        -:  548:#  include <tuple>
        -:  549:// C++11 puts its tuple into the ::std namespace rather than
        -:  550:// ::std::tr1.  gtest expects tuple to live in ::std::tr1, so put it there.
        -:  551:// This causes undefined behavior, but supported compilers react in
        -:  552:// the way we intend.
        -:  553:namespace std {
        -:  554:namespace tr1 {
        -:  555:using ::std::get;
        -:  556:using ::std::make_tuple;
        -:  557:using ::std::tuple;
        -:  558:using ::std::tuple_element;
        -:  559:using ::std::tuple_size;
        -:  560:}
        -:  561:}
        -:  562:
        -:  563:# elif GTEST_OS_SYMBIAN
        -:  564:
        -:  565:// On Symbian, BOOST_HAS_TR1_TUPLE causes Boost's TR1 tuple library to
        -:  566:// use STLport's tuple implementation, which unfortunately doesn't
        -:  567:// work as the copy of STLport distributed with Symbian is incomplete.
        -:  568:// By making sure BOOST_HAS_TR1_TUPLE is undefined, we force Boost to
        -:  569:// use its own tuple implementation.
        -:  570:#  ifdef BOOST_HAS_TR1_TUPLE
        -:  571:#   undef BOOST_HAS_TR1_TUPLE
        -:  572:#  endif  // BOOST_HAS_TR1_TUPLE
        -:  573:
        -:  574:// This prevents <boost/tr1/detail/config.hpp>, which defines
        -:  575:// BOOST_HAS_TR1_TUPLE, from being #included by Boost's <tuple>.
        -:  576:#  define BOOST_TR1_DETAIL_CONFIG_HPP_INCLUDED
        -:  577:#  include <tuple>
        -:  578:
        -:  579:# elif defined(__GNUC__) && (GTEST_GCC_VER_ >= 40000)
        -:  580:// GCC 4.0+ implements tr1/tuple in the <tr1/tuple> header.  This does
        -:  581:// not conform to the TR1 spec, which requires the header to be <tuple>.
        -:  582:
        -:  583:#  if !GTEST_HAS_RTTI && GTEST_GCC_VER_ < 40302
        -:  584:// Until version 4.3.2, gcc has a bug that causes <tr1/functional>,
        -:  585:// which is #included by <tr1/tuple>, to not compile when RTTI is
        -:  586:// disabled.  _TR1_FUNCTIONAL is the header guard for
        -:  587:// <tr1/functional>.  Hence the following #define is a hack to prevent
        -:  588:// <tr1/functional> from being included.
        -:  589:#   define _TR1_FUNCTIONAL 1
        -:  590:#   include <tr1/tuple>
        -:  591:#   undef _TR1_FUNCTIONAL  // Allows the user to #include
        -:  592:                        // <tr1/functional> if he chooses to.
        -:  593:#  else
        -:  594:#   include <tr1/tuple>  // NOLINT
        -:  595:#  endif  // !GTEST_HAS_RTTI && GTEST_GCC_VER_ < 40302
        -:  596:
        -:  597:# else
        -:  598:// If the compiler is not GCC 4.0+, we assume the user is using a
        -:  599:// spec-conforming TR1 implementation.
        -:  600:#  include <tuple>  // NOLINT
        -:  601:# endif  // GTEST_USE_OWN_TR1_TUPLE
        -:  602:
        -:  603:#endif  // GTEST_HAS_TR1_TUPLE
        -:  604:
        -:  605:// Determines whether clone(2) is supported.
        -:  606:// Usually it will only be available on Linux, excluding
        -:  607:// Linux on the Itanium architecture.
        -:  608:// Also see http://linux.die.net/man/2/clone.
        -:  609:#ifndef GTEST_HAS_CLONE
        -:  610:// The user didn't tell us, so we need to figure it out.
        -:  611:
        -:  612:# if GTEST_OS_LINUX && !defined(__ia64__)
        -:  613:#  if GTEST_OS_LINUX_ANDROID
        -:  614:// On Android, clone() is only available on ARM starting with Gingerbread.
        -:  615:#    if defined(__arm__) && __ANDROID_API__ >= 9
        -:  616:#     define GTEST_HAS_CLONE 1
        -:  617:#    else
        -:  618:#     define GTEST_HAS_CLONE 0
        -:  619:#    endif
        -:  620:#  else
        -:  621:#   define GTEST_HAS_CLONE 1
        -:  622:#  endif
        -:  623:# else
        -:  624:#  define GTEST_HAS_CLONE 0
        -:  625:# endif  // GTEST_OS_LINUX && !defined(__ia64__)
        -:  626:
        -:  627:#endif  // GTEST_HAS_CLONE
        -:  628:
        -:  629:// Determines whether to support stream redirection. This is used to test
        -:  630:// output correctness and to implement death tests.
        -:  631:#ifndef GTEST_HAS_STREAM_REDIRECTION
        -:  632:// By default, we assume that stream redirection is supported on all
        -:  633:// platforms except known mobile ones.
        -:  634:# if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_SYMBIAN
        -:  635:#  define GTEST_HAS_STREAM_REDIRECTION 0
        -:  636:# else
        -:  637:#  define GTEST_HAS_STREAM_REDIRECTION 1
        -:  638:# endif  // !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_SYMBIAN
        -:  639:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -:  640:
        -:  641:// Determines whether to support death tests.
        -:  642:// Google Test does not support death tests for VC 7.1 and earlier as
        -:  643:// abort() in a VC 7.1 application compiled as GUI in debug config
        -:  644:// pops up a dialog window that cannot be suppressed programmatically.
        -:  645:#if (GTEST_OS_LINUX || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS || \
        -:  646:     (GTEST_OS_MAC && !GTEST_OS_IOS) || GTEST_OS_IOS_SIMULATOR || \
        -:  647:     (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER >= 1400) || \
        -:  648:     GTEST_OS_WINDOWS_MINGW || GTEST_OS_AIX || GTEST_OS_HPUX || \
        -:  649:     GTEST_OS_OPENBSD || GTEST_OS_QNX)
        -:  650:# define GTEST_HAS_DEATH_TEST 1
        -:  651:# include <vector>  // NOLINT
        -:  652:#endif
        -:  653:
        -:  654:// We don't support MSVC 7.1 with exceptions disabled now.  Therefore
        -:  655:// all the compilers we care about are adequate for supporting
        -:  656:// value-parameterized tests.
        -:  657:#define GTEST_HAS_PARAM_TEST 1
        -:  658:
        -:  659:// Determines whether to support type-driven tests.
        -:  660:
        -:  661:// Typed tests need <typeinfo> and variadic macros, which GCC, VC++ 8.0,
        -:  662:// Sun Pro CC, IBM Visual Age, and HP aCC support.
        -:  663:#if defined(__GNUC__) || (_MSC_VER >= 1400) || defined(__SUNPRO_CC) || \
        -:  664:    defined(__IBMCPP__) || defined(__HP_aCC)
        -:  665:# define GTEST_HAS_TYPED_TEST 1
        -:  666:# define GTEST_HAS_TYPED_TEST_P 1
        -:  667:#endif
        -:  668:
        -:  669:// Determines whether to support Combine(). This only makes sense when
        -:  670:// value-parameterized tests are enabled.  The implementation doesn't
        -:  671:// work on Sun Studio since it doesn't understand templated conversion
        -:  672:// operators.
        -:  673:#if GTEST_HAS_PARAM_TEST && GTEST_HAS_TR1_TUPLE && !defined(__SUNPRO_CC)
        -:  674:# define GTEST_HAS_COMBINE 1
        -:  675:#endif
        -:  676:
        -:  677:// Determines whether the system compiler uses UTF-16 for encoding wide strings.
        -:  678:#define GTEST_WIDE_STRING_USES_UTF16_ \
        -:  679:    (GTEST_OS_WINDOWS || GTEST_OS_CYGWIN || GTEST_OS_SYMBIAN || GTEST_OS_AIX)
        -:  680:
        -:  681:// Determines whether test results can be streamed to a socket.
        -:  682:#if GTEST_OS_LINUX
        -:  683:# define GTEST_CAN_STREAM_RESULTS_ 1
        -:  684:#endif
        -:  685:
        -:  686:// Defines some utility macros.
        -:  687:
        -:  688:// The GNU compiler emits a warning if nested "if" statements are followed by
        -:  689:// an "else" statement and braces are not used to explicitly disambiguate the
        -:  690:// "else" binding.  This leads to problems with code like:
        -:  691://
        -:  692://   if (gate)
        -:  693://     ASSERT_*(condition) << "Some message";
        -:  694://
        -:  695:// The "switch (0) case 0:" idiom is used to suppress this.
        -:  696:#ifdef __INTEL_COMPILER
        -:  697:# define GTEST_AMBIGUOUS_ELSE_BLOCKER_
        -:  698:#else
        -:  699:# define GTEST_AMBIGUOUS_ELSE_BLOCKER_ switch (0) case 0: default:  // NOLINT
        -:  700:#endif
        -:  701:
        -:  702:// Use this annotation at the end of a struct/class definition to
        -:  703:// prevent the compiler from optimizing away instances that are never
        -:  704:// used.  This is useful when all interesting logic happens inside the
        -:  705:// c'tor and / or d'tor.  Example:
        -:  706://
        -:  707://   struct Foo {
        -:  708://     Foo() { ... }
        -:  709://   } GTEST_ATTRIBUTE_UNUSED_;
        -:  710://
        -:  711:// Also use it after a variable or parameter declaration to tell the
        -:  712:// compiler the variable/parameter does not have to be used.
        -:  713:#if defined(__GNUC__) && !defined(COMPILER_ICC)
        -:  714:# define GTEST_ATTRIBUTE_UNUSED_ __attribute__ ((unused))
        -:  715:#else
        -:  716:# define GTEST_ATTRIBUTE_UNUSED_
        -:  717:#endif
        -:  718:
        -:  719:// A macro to disallow operator=
        -:  720:// This should be used in the private: declarations for a class.
        -:  721:#define GTEST_DISALLOW_ASSIGN_(type)\
        -:  722:  void operator=(type const &)
        -:  723:
        -:  724:// A macro to disallow copy constructor and operator=
        -:  725:// This should be used in the private: declarations for a class.
        -:  726:#define GTEST_DISALLOW_COPY_AND_ASSIGN_(type)\
        -:  727:  type(type const &);\
        -:  728:  GTEST_DISALLOW_ASSIGN_(type)
        -:  729:
        -:  730:// Tell the compiler to warn about unused return values for functions declared
        -:  731:// with this macro.  The macro should be used on function declarations
        -:  732:// following the argument list:
        -:  733://
        -:  734://   Sprocket* AllocateSprocket() GTEST_MUST_USE_RESULT_;
        -:  735:#if defined(__GNUC__) && (GTEST_GCC_VER_ >= 30400) && !defined(COMPILER_ICC)
        -:  736:# define GTEST_MUST_USE_RESULT_ __attribute__ ((warn_unused_result))
        -:  737:#else
        -:  738:# define GTEST_MUST_USE_RESULT_
        -:  739:#endif  // __GNUC__ && (GTEST_GCC_VER_ >= 30400) && !COMPILER_ICC
        -:  740:
        -:  741:// Determine whether the compiler supports Microsoft's Structured Exception
        -:  742:// Handling.  This is supported by several Windows compilers but generally
        -:  743:// does not exist on any other system.
        -:  744:#ifndef GTEST_HAS_SEH
        -:  745:// The user didn't tell us, so we need to figure it out.
        -:  746:
        -:  747:# if defined(_MSC_VER) || defined(__BORLANDC__)
        -:  748:// These two compilers are known to support SEH.
        -:  749:#  define GTEST_HAS_SEH 1
        -:  750:# else
        -:  751:// Assume no SEH.
        -:  752:#  define GTEST_HAS_SEH 0
        -:  753:# endif
        -:  754:
        -:  755:#endif  // GTEST_HAS_SEH
        -:  756:
        -:  757:#ifdef _MSC_VER
        -:  758:
        -:  759:# if GTEST_LINKED_AS_SHARED_LIBRARY
        -:  760:#  define GTEST_API_ __declspec(dllimport)
        -:  761:# elif GTEST_CREATE_SHARED_LIBRARY
        -:  762:#  define GTEST_API_ __declspec(dllexport)
        -:  763:# endif
        -:  764:
        -:  765:#endif  // _MSC_VER
        -:  766:
        -:  767:#ifndef GTEST_API_
        -:  768:# define GTEST_API_
        -:  769:#endif
        -:  770:
        -:  771:#ifdef __GNUC__
        -:  772:// Ask the compiler to never inline a given function.
        -:  773:# define GTEST_NO_INLINE_ __attribute__((noinline))
        -:  774:#else
        -:  775:# define GTEST_NO_INLINE_
        -:  776:#endif
        -:  777:
        -:  778:// _LIBCPP_VERSION is defined by the libc++ library from the LLVM project.
        -:  779:#if defined(__GLIBCXX__) || defined(_LIBCPP_VERSION)
        -:  780:# define GTEST_HAS_CXXABI_H_ 1
        -:  781:#else
        -:  782:# define GTEST_HAS_CXXABI_H_ 0
        -:  783:#endif
        -:  784:
        -:  785:namespace testing {
        -:  786:
        -:  787:class Message;
        -:  788:
        -:  789:namespace internal {
        -:  790:
        -:  791:// A secret type that Google Test users don't know about.  It has no
        -:  792:// definition on purpose.  Therefore it's impossible to create a
        -:  793:// Secret object, which is what we want.
        -:  794:class Secret;
        -:  795:
        -:  796:// The GTEST_COMPILE_ASSERT_ macro can be used to verify that a compile time
        -:  797:// expression is true. For example, you could use it to verify the
        -:  798:// size of a static array:
        -:  799://
        -:  800://   GTEST_COMPILE_ASSERT_(ARRAYSIZE(content_type_names) == CONTENT_NUM_TYPES,
        -:  801://                         content_type_names_incorrect_size);
        -:  802://
        -:  803:// or to make sure a struct is smaller than a certain size:
        -:  804://
        -:  805://   GTEST_COMPILE_ASSERT_(sizeof(foo) < 128, foo_too_large);
        -:  806://
        -:  807:// The second argument to the macro is the name of the variable. If
        -:  808:// the expression is false, most compilers will issue a warning/error
        -:  809:// containing the name of the variable.
        -:  810:
        -:  811:template <bool>
        -:  812:struct CompileAssert {
        -:  813:};
        -:  814:
        -:  815:#define GTEST_COMPILE_ASSERT_(expr, msg) \
        -:  816:  typedef ::testing::internal::CompileAssert<(static_cast<bool>(expr))> \
        -:  817:      msg[static_cast<bool>(expr) ? 1 : -1] GTEST_ATTRIBUTE_UNUSED_
        -:  818:
        -:  819:// Implementation details of GTEST_COMPILE_ASSERT_:
        -:  820://
        -:  821:// - GTEST_COMPILE_ASSERT_ works by defining an array type that has -1
        -:  822://   elements (and thus is invalid) when the expression is false.
        -:  823://
        -:  824:// - The simpler definition
        -:  825://
        -:  826://    #define GTEST_COMPILE_ASSERT_(expr, msg) typedef char msg[(expr) ? 1 : -1]
        -:  827://
        -:  828://   does not work, as gcc supports variable-length arrays whose sizes
        -:  829://   are determined at run-time (this is gcc's extension and not part
        -:  830://   of the C++ standard).  As a result, gcc fails to reject the
        -:  831://   following code with the simple definition:
        -:  832://
        -:  833://     int foo;
        -:  834://     GTEST_COMPILE_ASSERT_(foo, msg); // not supposed to compile as foo is
        -:  835://                                      // not a compile-time constant.
        -:  836://
        -:  837:// - By using the type CompileAssert<(bool(expr))>, we ensures that
        -:  838://   expr is a compile-time constant.  (Template arguments must be
        -:  839://   determined at compile-time.)
        -:  840://
        -:  841:// - The outter parentheses in CompileAssert<(bool(expr))> are necessary
        -:  842://   to work around a bug in gcc 3.4.4 and 4.0.1.  If we had written
        -:  843://
        -:  844://     CompileAssert<bool(expr)>
        -:  845://
        -:  846://   instead, these compilers will refuse to compile
        -:  847://
        -:  848://     GTEST_COMPILE_ASSERT_(5 > 0, some_message);
        -:  849://
        -:  850://   (They seem to think the ">" in "5 > 0" marks the end of the
        -:  851://   template argument list.)
        -:  852://
        -:  853:// - The array size is (bool(expr) ? 1 : -1), instead of simply
        -:  854://
        -:  855://     ((expr) ? 1 : -1).
        -:  856://
        -:  857://   This is to avoid running into a bug in MS VC 7.1, which
        -:  858://   causes ((0.0) ? 1 : -1) to incorrectly evaluate to 1.
        -:  859:
        -:  860:// StaticAssertTypeEqHelper is used by StaticAssertTypeEq defined in gtest.h.
        -:  861://
        -:  862:// This template is declared, but intentionally undefined.
        -:  863:template <typename T1, typename T2>
        -:  864:struct StaticAssertTypeEqHelper;
        -:  865:
        -:  866:template <typename T>
        -:  867:struct StaticAssertTypeEqHelper<T, T> {};
        -:  868:
        -:  869:#if GTEST_HAS_GLOBAL_STRING
        -:  870:typedef ::string string;
        -:  871:#else
        -:  872:typedef ::std::string string;
        -:  873:#endif  // GTEST_HAS_GLOBAL_STRING
        -:  874:
        -:  875:#if GTEST_HAS_GLOBAL_WSTRING
        -:  876:typedef ::wstring wstring;
        -:  877:#elif GTEST_HAS_STD_WSTRING
        -:  878:typedef ::std::wstring wstring;
        -:  879:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -:  880:
        -:  881:// A helper for suppressing warnings on constant condition.  It just
        -:  882:// returns 'condition'.
        -:  883:GTEST_API_ bool IsTrue(bool condition);
        -:  884:
        -:  885:// Defines scoped_ptr.
        -:  886:
        -:  887:// This implementation of scoped_ptr is PARTIAL - it only contains
        -:  888:// enough stuff to satisfy Google Test's need.
        -:  889:template <typename T>
        -:  890:class scoped_ptr {
        -:  891: public:
        -:  892:  typedef T element_type;
        -:  893:
       79:  894:  explicit scoped_ptr(T* p = NULL) : ptr_(p) {}
      450:  895:  ~scoped_ptr() { reset(); }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 returned 100%
call   44 never executed
call   45 returned 100%
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 returned 100%
call   52 never executed
call   53 returned 100%
call   54 never executed
call   55 returned 100%
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 returned 100%
call   64 never executed
call   65 returned 100%
call   66 never executed
call   67 returned 100%
call   68 never executed
call   69 returned 100%
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 returned 100%
call   80 never executed
call   81 returned 100%
call   82 never executed
call   83 returned 100%
call   84 never executed
call   85 returned 100%
call   86 never executed
call   87 returned 100%
call   88 never executed
call   89 returned 100%
call   90 never executed
call   91 returned 100%
call   92 never executed
call   93 returned 100%
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 returned 100%
call   112 never executed
call   113 returned 100%
call   114 never executed
call   115 returned 100%
call   116 never executed
call   117 returned 100%
call   118 never executed
call   119 returned 100%
call   120 never executed
call   121 returned 100%
call   122 never executed
call   123 returned 100%
call   124 never executed
call   125 returned 100%
call   126 never executed
call   127 returned 100%
call   128 never executed
call   129 returned 100%
call   130 never executed
call   131 returned 100%
call   132 never executed
call   133 returned 100%
call   134 never executed
call   135 returned 100%
call   136 never executed
call   137 returned 100%
call   138 never executed
call   139 returned 100%
call   140 never executed
call   141 never executed
call   142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
call   153 never executed
call   154 never executed
call   155 never executed
call   156 never executed
call   157 never executed
call   158 never executed
call   159 never executed
call   160 never executed
call   161 never executed
call   162 never executed
call   163 never executed
call   164 never executed
call   165 never executed
call   166 never executed
call   167 never executed
call   168 never executed
call   169 never executed
call   170 never executed
call   171 returned 100%
call   172 never executed
call   173 returned 100%
call   174 never executed
call   175 returned 100%
call   176 never executed
call   177 returned 100%
call   178 never executed
call   179 returned 100%
call   180 never executed
call   181 returned 100%
call   182 never executed
call   183 never executed
call   184 never executed
call   185 never executed
call   186 never executed
call   187 never executed
call   188 never executed
call   189 never executed
call   190 never executed
call   191 never executed
call   192 never executed
call   193 never executed
call   194 never executed
call   195 returned 100%
call   196 never executed
call   197 returned 100%
call   198 never executed
call   199 returned 100%
call   200 never executed
call   201 returned 100%
call   202 never executed
call   203 returned 100%
call   204 never executed
call   205 returned 100%
call   206 never executed
call   207 returned 100%
call   208 never executed
call   209 returned 100%
call   210 never executed
call   211 returned 100%
call   212 never executed
call   213 returned 100%
call   214 never executed
call   215 returned 100%
call   216 never executed
call   217 returned 100%
call   218 never executed
call   219 returned 100%
call   220 never executed
call   221 returned 100%
call   222 never executed
call   223 returned 100%
call   224 never executed
call   225 returned 100%
call   226 never executed
call   227 never executed
call   228 never executed
call   229 never executed
call   230 never executed
call   231 never executed
call   232 never executed
call   233 never executed
call   234 never executed
call   235 never executed
call   236 never executed
call   237 never executed
call   238 never executed
call   239 never executed
call   240 never executed
call   241 never executed
call   242 never executed
call   243 never executed
call   244 never executed
call   245 never executed
call   246 never executed
call   247 never executed
call   248 never executed
call   249 never executed
call   250 never executed
call   251 never executed
call   252 never executed
call   253 never executed
call   254 never executed
call   255 never executed
call   256 never executed
call   257 never executed
call   258 never executed
call   259 returned 100%
call   260 never executed
call   261 returned 100%
call   262 never executed
call   263 returned 100%
call   264 never executed
call   265 returned 100%
call   266 never executed
call   267 returned 100%
call   268 never executed
call   269 returned 100%
call   270 never executed
call   271 returned 100%
call   272 never executed
call   273 returned 100%
call   274 never executed
call   275 returned 100%
call   276 never executed
call   277 returned 100%
call   278 never executed
call   279 returned 100%
call   280 never executed
call   281 returned 100%
call   282 never executed
call   283 returned 100%
call   284 never executed
call   285 returned 100%
call   286 never executed
call   287 returned 100%
call   288 never executed
call   289 returned 100%
call   290 never executed
call   291 returned 100%
call   292 never executed
call   293 returned 100%
call   294 never executed
call   295 returned 100%
call   296 never executed
call   297 returned 100%
call   298 never executed
call   299 returned 100%
call   300 never executed
call   301 returned 100%
call   302 never executed
call   303 returned 100%
call   304 never executed
call   305 returned 100%
call   306 never executed
call   307 returned 100%
call   308 never executed
call   309 returned 100%
call   310 never executed
call   311 returned 100%
call   312 never executed
call   313 returned 100%
call   314 never executed
call   315 returned 100%
call   316 never executed
call   317 returned 100%
call   318 never executed
call   319 returned 100%
call   320 never executed
call   321 returned 100%
call   322 never executed
call   323 returned 100%
call   324 never executed
call   325 returned 100%
call   326 never executed
call   327 returned 100%
call   328 never executed
call   329 returned 100%
call   330 never executed
call   331 returned 100%
call   332 never executed
call   333 returned 100%
call   334 never executed
call   335 never executed
call   336 never executed
call   337 never executed
call   338 never executed
call   339 never executed
call   340 never executed
call   341 never executed
call   342 never executed
call   343 never executed
call   344 never executed
call   345 never executed
call   346 never executed
call   347 never executed
call   348 never executed
call   349 never executed
call   350 never executed
call   351 never executed
call   352 never executed
call   353 never executed
call   354 never executed
call   355 never executed
call   356 never executed
call   357 never executed
call   358 never executed
call   359 never executed
call   360 never executed
call   361 never executed
call   362 never executed
call   363 never executed
call   364 never executed
call   365 never executed
call   366 never executed
call   367 never executed
call   368 never executed
call   369 never executed
call   370 never executed
call   371 never executed
call   372 never executed
call   373 never executed
call   374 never executed
call   375 never executed
call   376 never executed
call   377 never executed
call   378 never executed
call   379 never executed
call   380 never executed
call   381 never executed
call   382 never executed
call   383 never executed
call   384 never executed
call   385 never executed
call   386 never executed
call   387 never executed
call   388 never executed
call   389 never executed
call   390 never executed
call   391 never executed
call   392 never executed
call   393 never executed
call   394 never executed
call   395 never executed
call   396 never executed
call   397 never executed
call   398 never executed
call   399 never executed
call   400 never executed
call   401 never executed
call   402 never executed
call   403 never executed
call   404 never executed
call   405 never executed
call   406 never executed
call   407 never executed
call   408 never executed
call   409 never executed
call   410 never executed
call   411 returned 100%
call   412 never executed
call   413 returned 100%
call   414 never executed
call   415 returned 100%
call   416 never executed
call   417 returned 100%
call   418 never executed
call   419 returned 100%
call   420 never executed
call   421 returned 100%
call   422 never executed
call   423 never executed
call   424 never executed
call   425 never executed
call   426 never executed
call   427 never executed
call   428 never executed
call   429 never executed
call   430 never executed
call   431 never executed
call   432 never executed
call   433 never executed
call   434 never executed
call   435 returned 100%
call   436 never executed
call   437 returned 100%
call   438 never executed
call   439 returned 100%
call   440 never executed
call   441 returned 100%
call   442 never executed
call   443 returned 100%
call   444 never executed
call   445 returned 100%
call   446 never executed
call   447 returned 100%
call   448 never executed
call   449 returned 100%
call   450 never executed
call   451 returned 100%
call   452 never executed
call   453 returned 100%
call   454 never executed
call   455 returned 100%
call   456 never executed
call   457 returned 100%
call   458 never executed
call   459 returned 100%
call   460 never executed
call   461 returned 100%
call   462 never executed
call   463 returned 100%
call   464 never executed
call   465 returned 100%
call   466 never executed
call   467 returned 100%
call   468 never executed
call   469 returned 100%
call   470 never executed
call   471 never executed
call   472 never executed
call   473 never executed
call   474 never executed
call   475 never executed
call   476 never executed
call   477 never executed
call   478 never executed
call   479 never executed
call   480 never executed
call   481 never executed
call   482 never executed
call   483 never executed
call   484 never executed
call   485 never executed
call   486 never executed
call   487 never executed
call   488 never executed
call   489 never executed
call   490 never executed
call   491 never executed
call   492 never executed
call   493 never executed
call   494 never executed
call   495 never executed
call   496 never executed
call   497 never executed
call   498 never executed
call   499 never executed
call   500 never executed
call   501 never executed
call   502 never executed
call   503 never executed
call   504 never executed
call   505 never executed
call   506 never executed
call   507 returned 100%
call   508 never executed
call   509 returned 100%
call   510 never executed
call   511 returned 100%
call   512 never executed
call   513 returned 100%
call   514 never executed
call   515 returned 100%
call   516 never executed
call   517 returned 100%
call   518 never executed
call   519 returned 100%
call   520 never executed
call   521 returned 100%
call   522 never executed
call   523 returned 100%
call   524 never executed
call   525 returned 100%
call   526 never executed
call   527 returned 100%
call   528 never executed
call   529 returned 100%
call   530 never executed
call   531 returned 100%
call   532 never executed
call   533 returned 100%
call   534 never executed
call   535 returned 100%
call   536 never executed
call   537 returned 100%
call   538 never executed
call   539 returned 100%
call   540 never executed
call   541 returned 100%
call   542 never executed
call   543 returned 100%
call   544 never executed
call   545 returned 100%
call   546 never executed
call   547 returned 100%
call   548 never executed
call   549 returned 100%
call   550 never executed
call   551 returned 100%
call   552 never executed
call   553 returned 100%
call   554 never executed
call   555 never executed
call   556 never executed
call   557 never executed
call   558 never executed
call   559 never executed
call   560 never executed
call   561 never executed
call   562 never executed
call   563 never executed
call   564 never executed
call   565 never executed
call   566 never executed
call   567 never executed
call   568 never executed
call   569 never executed
call   570 never executed
call   571 never executed
call   572 never executed
call   573 never executed
call   574 never executed
call   575 never executed
call   576 never executed
call   577 never executed
call   578 never executed
call   579 never executed
call   580 never executed
call   581 never executed
call   582 never executed
call   583 never executed
call   584 never executed
call   585 never executed
call   586 never executed
call   587 never executed
call   588 never executed
call   589 never executed
call   590 never executed
call   591 never executed
call   592 never executed
call   593 never executed
call   594 never executed
call   595 never executed
call   596 never executed
call   597 never executed
call   598 never executed
call   599 never executed
call   600 never executed
call   601 never executed
call   602 never executed
call   603 returned 100%
call   604 never executed
call   605 returned 100%
call   606 never executed
call   607 returned 100%
call   608 never executed
call   609 returned 100%
call   610 never executed
call   611 returned 100%
call   612 never executed
call   613 returned 100%
call   614 never executed
call   615 returned 100%
call   616 never executed
call   617 returned 100%
call   618 never executed
call   619 returned 100%
call   620 never executed
call   621 returned 100%
call   622 never executed
call   623 returned 100%
call   624 never executed
call   625 returned 100%
call   626 never executed
call   627 returned 100%
call   628 never executed
call   629 returned 100%
call   630 never executed
call   631 returned 100%
call   632 never executed
call   633 returned 100%
call   634 never executed
call   635 returned 100%
call   636 never executed
call   637 returned 100%
call   638 never executed
call   639 returned 100%
call   640 never executed
call   641 returned 100%
call   642 never executed
call   643 returned 100%
call   644 never executed
call   645 returned 100%
call   646 never executed
call   647 returned 100%
call   648 never executed
call   649 returned 100%
call   650 never executed
call   651 returned 100%
call   652 never executed
call   653 returned 100%
call   654 never executed
call   655 returned 100%
call   656 never executed
call   657 returned 100%
call   658 never executed
call   659 returned 100%
call   660 never executed
call   661 returned 100%
call   662 never executed
call   663 returned 100%
call   664 never executed
call   665 returned 100%
call   666 never executed
call   667 returned 100%
call   668 never executed
call   669 returned 100%
call   670 never executed
call   671 returned 100%
call   672 never executed
call   673 returned 100%
call   674 never executed
call   675 returned 100%
call   676 never executed
call   677 returned 100%
call   678 never executed
call   679 returned 100%
call   680 never executed
call   681 returned 100%
call   682 never executed
call   683 returned 100%
call   684 never executed
call   685 returned 100%
call   686 never executed
call   687 returned 100%
call   688 never executed
call   689 returned 100%
call   690 never executed
call   691 returned 100%
call   692 never executed
call   693 returned 100%
call   694 never executed
call   695 returned 100%
call   696 never executed
call   697 returned 100%
call   698 never executed
call   699 returned 100%
call   700 never executed
call   701 returned 100%
call   702 never executed
call   703 returned 100%
call   704 never executed
call   705 returned 100%
call   706 never executed
call   707 returned 100%
call   708 never executed
call   709 returned 100%
call   710 never executed
call   711 never executed
call   712 never executed
call   713 never executed
call   714 never executed
call   715 never executed
call   716 never executed
call   717 never executed
call   718 never executed
call   719 never executed
call   720 never executed
call   721 never executed
call   722 never executed
call   723 never executed
call   724 never executed
call   725 never executed
call   726 never executed
call   727 never executed
call   728 never executed
call   729 never executed
call   730 never executed
call   731 never executed
call   732 never executed
call   733 never executed
call   734 never executed
call   735 never executed
call   736 never executed
call   737 never executed
call   738 never executed
call   739 never executed
call   740 never executed
call   741 never executed
call   742 never executed
call   743 never executed
call   744 never executed
call   745 never executed
call   746 never executed
call   747 never executed
call   748 never executed
call   749 never executed
call   750 never executed
call   751 never executed
call   752 never executed
call   753 never executed
call   754 never executed
call   755 never executed
call   756 never executed
call   757 never executed
call   758 never executed
call   759 never executed
call   760 never executed
call   761 never executed
call   762 never executed
call   763 never executed
call   764 never executed
call   765 never executed
call   766 never executed
call   767 never executed
call   768 never executed
call   769 never executed
call   770 never executed
call   771 never executed
call   772 never executed
call   773 never executed
call   774 never executed
call   775 never executed
call   776 never executed
call   777 never executed
call   778 never executed
call   779 never executed
call   780 never executed
call   781 never executed
call   782 never executed
call   783 never executed
call   784 never executed
call   785 never executed
call   786 never executed
call   787 never executed
call   788 never executed
call   789 never executed
call   790 never executed
call   791 never executed
call   792 never executed
call   793 never executed
call   794 never executed
call   795 never executed
call   796 never executed
call   797 never executed
call   798 never executed
call   799 never executed
call   800 never executed
call   801 never executed
call   802 never executed
call   803 never executed
call   804 never executed
call   805 never executed
call   806 never executed
call   807 never executed
call   808 never executed
call   809 never executed
call   810 never executed
call   811 never executed
call   812 never executed
call   813 never executed
call   814 never executed
call   815 never executed
call   816 never executed
call   817 never executed
call   818 never executed
call   819 returned 100%
call   820 never executed
call   821 returned 100%
call   822 never executed
call   823 returned 100%
call   824 never executed
call   825 returned 100%
call   826 never executed
call   827 returned 100%
call   828 never executed
call   829 returned 100%
call   830 never executed
call   831 returned 100%
call   832 never executed
call   833 returned 100%
call   834 never executed
call   835 returned 100%
call   836 never executed
call   837 returned 100%
call   838 never executed
call   839 returned 100%
call   840 never executed
call   841 returned 100%
call   842 never executed
call   843 returned 100%
call   844 never executed
call   845 returned 100%
call   846 never executed
call   847 returned 100%
call   848 never executed
call   849 returned 100%
call   850 never executed
call   851 returned 100%
call   852 never executed
call   853 returned 100%
call   854 never executed
call   855 returned 100%
call   856 never executed
call   857 returned 100%
call   858 never executed
call   859 returned 100%
call   860 never executed
call   861 returned 100%
call   862 never executed
call   863 returned 100%
call   864 never executed
call   865 returned 100%
call   866 never executed
call   867 returned 100%
call   868 never executed
call   869 returned 100%
call   870 never executed
call   871 returned 100%
call   872 never executed
call   873 returned 100%
call   874 never executed
call   875 returned 100%
call   876 never executed
call   877 returned 100%
call   878 never executed
call   879 returned 100%
call   880 never executed
call   881 returned 100%
call   882 never executed
call   883 returned 100%
call   884 never executed
call   885 returned 100%
call   886 never executed
call   887 returned 100%
call   888 never executed
call   889 returned 100%
call   890 never executed
call   891 returned 100%
call   892 never executed
call   893 returned 100%
call   894 never executed
call   895 returned 100%
call   896 never executed
call   897 returned 100%
call   898 never executed
call   899 returned 100%
call   900 never executed
call   901 returned 100%
call   902 never executed
call   903 returned 100%
call   904 never executed
call   905 returned 100%
call   906 never executed
call   907 returned 100%
call   908 never executed
call   909 returned 100%
call   910 never executed
call   911 returned 100%
call   912 never executed
call   913 returned 100%
call   914 never executed
call   915 returned 100%
call   916 never executed
call   917 returned 100%
call   918 never executed
call   919 returned 100%
call   920 never executed
call   921 returned 100%
call   922 never executed
call   923 returned 100%
call   924 never executed
call   925 returned 100%
call   926 never executed
call   927 returned 100%
call   928 never executed
call   929 returned 100%
call   930 never executed
call   931 returned 100%
call   932 never executed
call   933 returned 100%
call   934 never executed
call   935 returned 100%
call   936 never executed
call   937 returned 100%
call   938 never executed
call   939 returned 100%
call   940 never executed
call   941 returned 100%
call   942 never executed
call   943 returned 100%
call   944 never executed
call   945 returned 100%
call   946 never executed
call   947 returned 100%
call   948 never executed
call   949 returned 100%
call   950 never executed
call   951 returned 100%
call   952 never executed
call   953 returned 100%
call   954 never executed
call   955 returned 100%
call   956 never executed
call   957 returned 100%
call   958 never executed
call   959 returned 100%
call   960 never executed
call   961 returned 100%
call   962 never executed
call   963 returned 100%
call   964 never executed
call   965 returned 100%
call   966 never executed
call   967 returned 100%
call   968 never executed
call   969 returned 100%
call   970 never executed
call   971 returned 100%
call   972 never executed
call   973 returned 100%
call   974 never executed
call   975 returned 100%
call   976 never executed
call   977 returned 100%
call   978 never executed
call   979 returned 100%
call   980 never executed
call   981 returned 100%
call   982 never executed
call   983 returned 100%
call   984 never executed
call   985 returned 100%
call   986 never executed
call   987 returned 100%
call   988 never executed
call   989 returned 100%
call   990 never executed
call   991 returned 100%
call   992 never executed
call   993 returned 100%
call   994 never executed
call   995 returned 100%
call   996 never executed
call   997 returned 100%
call   998 never executed
call   999 returned 100%
call   1000 never executed
call   1001 returned 100%
call   1002 never executed
call   1003 returned 100%
call   1004 never executed
call   1005 returned 100%
call   1006 never executed
call   1007 returned 100%
call   1008 never executed
call   1009 returned 100%
call   1010 never executed
call   1011 returned 100%
call   1012 never executed
call   1013 returned 100%
call   1014 never executed
call   1015 returned 100%
call   1016 never executed
call   1017 returned 100%
call   1018 never executed
call   1019 returned 100%
call   1020 never executed
call   1021 returned 100%
call   1022 never executed
call   1023 returned 100%
call   1024 never executed
call   1025 returned 100%
call   1026 never executed
call   1027 returned 100%
call   1028 never executed
call   1029 returned 100%
call   1030 never executed
call   1031 returned 100%
call   1032 never executed
call   1033 returned 100%
call   1034 never executed
call   1035 returned 100%
call   1036 never executed
call   1037 returned 100%
call   1038 never executed
call   1039 returned 100%
call   1040 never executed
call   1041 returned 100%
call   1042 never executed
call   1043 returned 100%
call   1044 never executed
call   1045 never executed
call   1046 never executed
call   1047 never executed
call   1048 never executed
call   1049 never executed
call   1050 never executed
call   1051 never executed
call   1052 never executed
call   1053 never executed
call   1054 never executed
call   1055 never executed
call   1056 never executed
call   1057 never executed
call   1058 never executed
call   1059 never executed
call   1060 never executed
call   1061 never executed
call   1062 never executed
call   1063 never executed
call   1064 never executed
call   1065 never executed
call   1066 never executed
call   1067 never executed
call   1068 never executed
call   1069 never executed
call   1070 never executed
call   1071 never executed
call   1072 never executed
call   1073 never executed
call   1074 never executed
call   1075 never executed
call   1076 never executed
call   1077 never executed
call   1078 never executed
call   1079 never executed
call   1080 never executed
call   1081 never executed
call   1082 never executed
call   1083 never executed
call   1084 never executed
call   1085 never executed
call   1086 never executed
call   1087 never executed
call   1088 never executed
call   1089 never executed
call   1090 never executed
call   1091 never executed
call   1092 never executed
call   1093 never executed
call   1094 never executed
call   1095 never executed
call   1096 never executed
call   1097 never executed
call   1098 never executed
call   1099 never executed
call   1100 never executed
call   1101 never executed
call   1102 never executed
call   1103 never executed
call   1104 never executed
call   1105 never executed
call   1106 never executed
call   1107 never executed
call   1108 never executed
call   1109 never executed
call   1110 never executed
call   1111 never executed
call   1112 never executed
call   1113 never executed
call   1114 never executed
call   1115 never executed
call   1116 never executed
call   1117 never executed
call   1118 never executed
call   1119 never executed
call   1120 never executed
call   1121 never executed
call   1122 never executed
call   1123 never executed
call   1124 never executed
call   1125 never executed
call   1126 never executed
call   1127 never executed
call   1128 never executed
call   1129 never executed
call   1130 never executed
call   1131 never executed
call   1132 never executed
call   1133 never executed
call   1134 never executed
call   1135 never executed
call   1136 never executed
call   1137 never executed
call   1138 never executed
call   1139 never executed
call   1140 never executed
call   1141 never executed
call   1142 never executed
call   1143 never executed
call   1144 never executed
call   1145 never executed
call   1146 never executed
call   1147 never executed
call   1148 never executed
call   1149 never executed
call   1150 never executed
call   1151 never executed
call   1152 never executed
call   1153 never executed
call   1154 never executed
call   1155 never executed
call   1156 never executed
call   1157 never executed
call   1158 never executed
call   1159 never executed
call   1160 never executed
call   1161 never executed
call   1162 never executed
call   1163 never executed
call   1164 never executed
call   1165 never executed
call   1166 never executed
call   1167 never executed
call   1168 never executed
call   1169 never executed
call   1170 never executed
call   1171 never executed
call   1172 never executed
call   1173 never executed
call   1174 never executed
call   1175 never executed
call   1176 never executed
call   1177 never executed
call   1178 never executed
call   1179 never executed
call   1180 never executed
call   1181 never executed
call   1182 never executed
call   1183 never executed
call   1184 never executed
call   1185 never executed
call   1186 never executed
call   1187 never executed
call   1188 never executed
call   1189 never executed
call   1190 never executed
call   1191 never executed
call   1192 never executed
call   1193 never executed
call   1194 never executed
call   1195 never executed
call   1196 never executed
call   1197 never executed
call   1198 never executed
call   1199 never executed
call   1200 never executed
call   1201 never executed
call   1202 never executed
call   1203 never executed
call   1204 never executed
call   1205 never executed
call   1206 never executed
call   1207 never executed
call   1208 never executed
call   1209 never executed
call   1210 never executed
call   1211 never executed
call   1212 never executed
call   1213 never executed
call   1214 never executed
call   1215 never executed
call   1216 never executed
call   1217 never executed
call   1218 never executed
call   1219 never executed
call   1220 never executed
call   1221 never executed
call   1222 never executed
call   1223 never executed
call   1224 never executed
call   1225 never executed
call   1226 never executed
call   1227 never executed
call   1228 never executed
call   1229 never executed
call   1230 never executed
call   1231 never executed
call   1232 never executed
call   1233 never executed
call   1234 never executed
call   1235 never executed
call   1236 never executed
call   1237 never executed
call   1238 never executed
call   1239 never executed
call   1240 never executed
call   1241 never executed
call   1242 never executed
call   1243 never executed
call   1244 never executed
call   1245 never executed
call   1246 never executed
call   1247 never executed
call   1248 never executed
call   1249 never executed
call   1250 never executed
call   1251 never executed
call   1252 never executed
call   1253 never executed
call   1254 never executed
call   1255 never executed
call   1256 never executed
call   1257 never executed
call   1258 never executed
call   1259 never executed
call   1260 never executed
call   1261 never executed
call   1262 never executed
call   1263 never executed
call   1264 never executed
call   1265 never executed
call   1266 never executed
call   1267 never executed
call   1268 never executed
call   1269 never executed
call   1270 never executed
call   1271 returned 100%
call   1272 never executed
call   1273 never executed
call   1274 never executed
call   1275 returned 100%
call   1276 never executed
call   1277 returned 100%
call   1278 never executed
call   1279 returned 100%
call   1280 never executed
call   1281 returned 100%
call   1282 never executed
call   1283 returned 100%
call   1284 never executed
call   1285 returned 100%
call   1286 never executed
call   1287 returned 100%
call   1288 never executed
call   1289 returned 100%
call   1290 never executed
call   1291 returned 100%
call   1292 never executed
call   1293 returned 100%
call   1294 never executed
call   1295 returned 100%
call   1296 never executed
call   1297 never executed
call   1298 never executed
call   1299 never executed
call   1300 never executed
call   1301 never executed
call   1302 never executed
call   1303 never executed
call   1304 never executed
call   1305 never executed
call   1306 never executed
call   1307 never executed
call   1308 never executed
call   1309 never executed
call   1310 never executed
call   1311 never executed
call   1312 never executed
call   1313 never executed
call   1314 never executed
call   1315 never executed
call   1316 never executed
call   1317 never executed
call   1318 never executed
call   1319 returned 100%
call   1320 never executed
call   1321 returned 100%
call   1322 never executed
call   1323 returned 100%
call   1324 never executed
call   1325 returned 100%
call   1326 never executed
call   1327 returned 100%
call   1328 never executed
call   1329 returned 100%
call   1330 never executed
call   1331 returned 100%
call   1332 never executed
call   1333 returned 100%
call   1334 never executed
call   1335 returned 100%
call   1336 never executed
call   1337 returned 100%
call   1338 never executed
call   1339 returned 100%
call   1340 never executed
call   1341 returned 100%
call   1342 never executed
call   1343 returned 100%
call   1344 never executed
call   1345 returned 100%
call   1346 never executed
call   1347 returned 100%
call   1348 returned 100%
call   1349 returned 100%
call   1350 returned 100%
call   1351 returned 100%
call   1352 returned 100%
call   1353 returned 100%
call   1354 returned 100%
call   1355 returned 100%
call   1356 returned 100%
call   1357 returned 100%
call   1358 returned 100%
call   1359 returned 100%
call   1360 returned 100%
call   1361 returned 100%
call   1362 returned 100%
call   1363 never executed
call   1364 never executed
call   1365 never executed
call   1366 never executed
call   1367 never executed
call   1368 never executed
call   1369 never executed
call   1370 never executed
call   1371 never executed
call   1372 never executed
call   1373 never executed
call   1374 never executed
call   1375 never executed
call   1376 never executed
call   1377 never executed
call   1378 never executed
call   1379 never executed
call   1380 never executed
call   1381 never executed
call   1382 never executed
call   1383 never executed
call   1384 never executed
call   1385 never executed
call   1386 never executed
call   1387 never executed
call   1388 never executed
call   1389 never executed
call   1390 never executed
call   1391 never executed
call   1392 never executed
call   1393 never executed
call   1394 returned 100%
call   1395 never executed
call   1396 returned 100%
call   1397 never executed
call   1398 returned 100%
call   1399 never executed
call   1400 returned 100%
call   1401 never executed
call   1402 returned 100%
call   1403 never executed
call   1404 returned 100%
call   1405 never executed
call   1406 returned 100%
call   1407 never executed
call   1408 returned 100%
call   1409 never executed
call   1410 returned 100%
call   1411 never executed
call   1412 returned 100%
call   1413 never executed
call   1414 returned 100%
call   1415 never executed
call   1416 returned 100%
call   1417 never executed
call   1418 never executed
call   1419 never executed
call   1420 never executed
call   1421 never executed
call   1422 never executed
call   1423 never executed
call   1424 never executed
call   1425 never executed
call   1426 never executed
call   1427 never executed
call   1428 never executed
call   1429 never executed
call   1430 never executed
call   1431 never executed
call   1432 never executed
call   1433 never executed
call   1434 never executed
call   1435 never executed
call   1436 never executed
call   1437 never executed
call   1438 never executed
call   1439 never executed
call   1440 never executed
call   1441 never executed
call   1442 returned 100%
call   1443 never executed
call   1444 returned 100%
call   1445 never executed
call   1446 returned 100%
call   1447 never executed
call   1448 returned 100%
call   1449 never executed
call   1450 returned 100%
call   1451 never executed
call   1452 returned 100%
call   1453 never executed
call   1454 returned 100%
call   1455 never executed
call   1456 returned 100%
call   1457 never executed
call   1458 returned 100%
call   1459 never executed
call   1460 returned 100%
call   1461 never executed
call   1462 never executed
call   1463 never executed
call   1464 never executed
call   1465 never executed
call   1466 never executed
call   1467 never executed
call   1468 never executed
call   1469 never executed
call   1470 never executed
call   1471 never executed
call   1472 never executed
call   1473 never executed
call   1474 never executed
call   1475 never executed
call   1476 never executed
call   1477 never executed
call   1478 never executed
call   1479 never executed
call   1480 never executed
call   1481 never executed
call   1482 returned 100%
call   1483 never executed
call   1484 returned 100%
call   1485 never executed
call   1486 returned 100%
call   1487 never executed
call   1488 returned 100%
call   1489 never executed
call   1490 returned 100%
call   1491 never executed
call   1492 returned 100%
call   1493 never executed
call   1494 returned 100%
call   1495 never executed
call   1496 returned 100%
call   1497 never executed
call   1498 returned 100%
call   1499 never executed
call   1500 returned 100%
call   1501 never executed
call   1502 returned 100%
call   1503 never executed
call   1504 returned 100%
call   1505 never executed
call   1506 returned 100%
call   1507 never executed
call   1508 returned 100%
call   1509 never executed
call   1510 returned 100%
call   1511 never executed
call   1512 returned 100%
call   1513 never executed
call   1514 returned 100%
call   1515 never executed
call   1516 returned 100%
call   1517 never executed
call   1518 returned 100%
call   1519 never executed
call   1520 returned 100%
call   1521 never executed
call   1522 returned 100%
call   1523 never executed
call   1524 returned 100%
call   1525 never executed
call   1526 returned 100%
call   1527 never executed
call   1528 returned 100%
call   1529 never executed
call   1530 returned 100%
call   1531 never executed
call   1532 returned 100%
call   1533 never executed
call   1534 returned 100%
call   1535 never executed
call   1536 returned 100%
call   1537 never executed
call   1538 returned 100%
call   1539 never executed
call   1540 returned 100%
call   1541 never executed
call   1542 returned 100%
call   1543 never executed
call   1544 returned 100%
call   1545 never executed
call   1546 returned 100%
call   1547 never executed
call   1548 returned 100%
call   1549 never executed
call   1550 returned 100%
call   1551 never executed
call   1552 returned 100%
call   1553 never executed
call   1554 never executed
call   1555 never executed
call   1556 never executed
call   1557 never executed
call   1558 never executed
call   1559 never executed
call   1560 never executed
call   1561 never executed
call   1562 never executed
call   1563 never executed
call   1564 never executed
call   1565 never executed
call   1566 never executed
call   1567 never executed
call   1568 never executed
call   1569 never executed
call   1570 never executed
call   1571 never executed
call   1572 never executed
call   1573 never executed
call   1574 never executed
call   1575 never executed
call   1576 never executed
call   1577 never executed
call   1578 never executed
call   1579 never executed
call   1580 never executed
call   1581 never executed
call   1582 never executed
call   1583 never executed
call   1584 never executed
call   1585 never executed
call   1586 never executed
call   1587 never executed
call   1588 never executed
call   1589 never executed
call   1590 never executed
call   1591 never executed
call   1592 never executed
call   1593 never executed
call   1594 never executed
call   1595 never executed
call   1596 never executed
call   1597 never executed
call   1598 never executed
call   1599 never executed
call   1600 never executed
call   1601 never executed
call   1602 never executed
call   1603 never executed
call   1604 never executed
call   1605 never executed
call   1606 never executed
call   1607 never executed
call   1608 never executed
call   1609 never executed
call   1610 never executed
call   1611 never executed
call   1612 never executed
call   1613 never executed
call   1614 never executed
call   1615 never executed
call   1616 never executed
call   1617 never executed
call   1618 never executed
call   1619 never executed
call   1620 never executed
call   1621 never executed
call   1622 never executed
call   1623 never executed
call   1624 never executed
call   1625 never executed
call   1626 returned 100%
call   1627 never executed
call   1628 never executed
call   1629 never executed
call   1630 returned 100%
call   1631 never executed
call   1632 returned 100%
call   1633 never executed
call   1634 returned 100%
call   1635 never executed
call   1636 returned 100%
call   1637 never executed
call   1638 returned 100%
call   1639 never executed
call   1640 returned 100%
call   1641 never executed
call   1642 never executed
call   1643 never executed
call   1644 never executed
call   1645 never executed
call   1646 never executed
call   1647 never executed
call   1648 never executed
call   1649 never executed
call   1650 never executed
call   1651 never executed
call   1652 never executed
        -:  896:
    #####:  897:  T& operator*() const { return *ptr_; }
    #####:  898:  T* operator->() const { return ptr_; }
    #####:  899:  T* get() const { return ptr_; }
        -:  900:
        -:  901:  T* release() {
        -:  902:    T* const ptr = ptr_;
        -:  903:    ptr_ = NULL;
        -:  904:    return ptr;
        -:  905:  }
        -:  906:
function _ZN7testing8internal10scoped_ptrISt18basic_stringstreamIcSt11char_traitsIcESaIcEEE5resetEPS6_ called 958 returned 100% blocks executed 100%
function _ZN7testing8internal10scoped_ptrISsE5resetEPSs called 450 returned 100% blocks executed 25%
     1408:  907:  void reset(T* p = NULL) {
     1408:  908:    if (p != ptr_) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      958:  909:      if (IsTrue(sizeof(T) > 0)) {  // Makes sure T is a complete type.
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 never executed
branch  4 never executed
branch  5 never executed
      958:  910:        delete ptr_;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  911:      }
      958:  912:      ptr_ = p;
        -:  913:    }
     1408:  914:  }
        -:  915:
        -:  916: private:
        -:  917:  T* ptr_;
        -:  918:
        -:  919:  GTEST_DISALLOW_COPY_AND_ASSIGN_(scoped_ptr);
        -:  920:};
        -:  921:
        -:  922:// Defines RE.
        -:  923:
        -:  924:// A simple C++ wrapper for <regex.h>.  It uses the POSIX Extended
        -:  925:// Regular Expression syntax.
        -:  926:class GTEST_API_ RE {
        -:  927: public:
        -:  928:  // A copy constructor is required by the Standard to initialize object
        -:  929:  // references from r-values.
        -:  930:  RE(const RE& other) { Init(other.pattern()); }
        -:  931:
        -:  932:  // Constructs an RE from a string.
        -:  933:  RE(const ::std::string& regex) { Init(regex.c_str()); }  // NOLINT
        -:  934:
        -:  935:#if GTEST_HAS_GLOBAL_STRING
        -:  936:
        -:  937:  RE(const ::string& regex) { Init(regex.c_str()); }  // NOLINT
        -:  938:
        -:  939:#endif  // GTEST_HAS_GLOBAL_STRING
        -:  940:
        -:  941:  RE(const char* regex) { Init(regex); }  // NOLINT
        -:  942:  ~RE();
        -:  943:
        -:  944:  // Returns the string representation of the regex.
        -:  945:  const char* pattern() const { return pattern_; }
        -:  946:
        -:  947:  // FullMatch(str, re) returns true iff regular expression re matches
        -:  948:  // the entire str.
        -:  949:  // PartialMatch(str, re) returns true iff regular expression re
        -:  950:  // matches a substring of str (including str itself).
        -:  951:  //
        -:  952:  // TODO(wan@google.com): make FullMatch() and PartialMatch() work
        -:  953:  // when str contains NUL characters.
        -:  954:  static bool FullMatch(const ::std::string& str, const RE& re) {
        -:  955:    return FullMatch(str.c_str(), re);
        -:  956:  }
        -:  957:  static bool PartialMatch(const ::std::string& str, const RE& re) {
        -:  958:    return PartialMatch(str.c_str(), re);
        -:  959:  }
        -:  960:
        -:  961:#if GTEST_HAS_GLOBAL_STRING
        -:  962:
        -:  963:  static bool FullMatch(const ::string& str, const RE& re) {
        -:  964:    return FullMatch(str.c_str(), re);
        -:  965:  }
        -:  966:  static bool PartialMatch(const ::string& str, const RE& re) {
        -:  967:    return PartialMatch(str.c_str(), re);
        -:  968:  }
        -:  969:
        -:  970:#endif  // GTEST_HAS_GLOBAL_STRING
        -:  971:
        -:  972:  static bool FullMatch(const char* str, const RE& re);
        -:  973:  static bool PartialMatch(const char* str, const RE& re);
        -:  974:
        -:  975: private:
        -:  976:  void Init(const char* regex);
        -:  977:
        -:  978:  // We use a const char* instead of an std::string, as Google Test used to be
        -:  979:  // used where std::string is not available.  TODO(wan@google.com): change to
        -:  980:  // std::string.
        -:  981:  const char* pattern_;
        -:  982:  bool is_valid_;
        -:  983:
        -:  984:#if GTEST_USES_POSIX_RE
        -:  985:
        -:  986:  regex_t full_regex_;     // For FullMatch().
        -:  987:  regex_t partial_regex_;  // For PartialMatch().
        -:  988:
        -:  989:#else  // GTEST_USES_SIMPLE_RE
        -:  990:
        -:  991:  const char* full_pattern_;  // For FullMatch();
        -:  992:
        -:  993:#endif
        -:  994:
        -:  995:  GTEST_DISALLOW_ASSIGN_(RE);
        -:  996:};
        -:  997:
        -:  998:// Formats a source file path and a line number as they would appear
        -:  999:// in an error message from the compiler used to compile this code.
        -: 1000:GTEST_API_ ::std::string FormatFileLocation(const char* file, int line);
        -: 1001:
        -: 1002:// Formats a file location for compiler-independent XML output.
        -: 1003:// Although this function is not platform dependent, we put it next to
        -: 1004:// FormatFileLocation in order to contrast the two functions.
        -: 1005:GTEST_API_ ::std::string FormatCompilerIndependentFileLocation(const char* file,
        -: 1006:                                                               int line);
        -: 1007:
        -: 1008:// Defines logging utilities:
        -: 1009://   GTEST_LOG_(severity) - logs messages at the specified severity level. The
        -: 1010://                          message itself is streamed into the macro.
        -: 1011://   LogToStderr()  - directs all log messages to stderr.
        -: 1012://   FlushInfoLog() - flushes informational log messages.
        -: 1013:
        -: 1014:enum GTestLogSeverity {
        -: 1015:  GTEST_INFO,
        -: 1016:  GTEST_WARNING,
        -: 1017:  GTEST_ERROR,
        -: 1018:  GTEST_FATAL
        -: 1019:};
        -: 1020:
        -: 1021:// Formats log entry severity, provides a stream object for streaming the
        -: 1022:// log message, and terminates the message with a newline when going out of
        -: 1023:// scope.
        -: 1024:class GTEST_API_ GTestLog {
        -: 1025: public:
        -: 1026:  GTestLog(GTestLogSeverity severity, const char* file, int line);
        -: 1027:
        -: 1028:  // Flushes the buffers and, if severity is GTEST_FATAL, aborts the program.
        -: 1029:  ~GTestLog();
        -: 1030:
        -: 1031:  ::std::ostream& GetStream() { return ::std::cerr; }
        -: 1032:
        -: 1033: private:
        -: 1034:  const GTestLogSeverity severity_;
        -: 1035:
        -: 1036:  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestLog);
        -: 1037:};
        -: 1038:
        -: 1039:#define GTEST_LOG_(severity) \
        -: 1040:    ::testing::internal::GTestLog(::testing::internal::GTEST_##severity, \
        -: 1041:                                  __FILE__, __LINE__).GetStream()
        -: 1042:
        -: 1043:inline void LogToStderr() {}
        -: 1044:inline void FlushInfoLog() { fflush(NULL); }
        -: 1045:
        -: 1046:// INTERNAL IMPLEMENTATION - DO NOT USE.
        -: 1047://
        -: 1048:// GTEST_CHECK_ is an all-mode assert. It aborts the program if the condition
        -: 1049:// is not satisfied.
        -: 1050://  Synopsys:
        -: 1051://    GTEST_CHECK_(boolean_condition);
        -: 1052://     or
        -: 1053://    GTEST_CHECK_(boolean_condition) << "Additional message";
        -: 1054://
        -: 1055://    This checks the condition and if the condition is not satisfied
        -: 1056://    it prints message about the condition violation, including the
        -: 1057://    condition itself, plus additional message streamed into it, if any,
        -: 1058://    and then it aborts the program. It aborts the program irrespective of
        -: 1059://    whether it is built in the debug mode or not.
        -: 1060:#define GTEST_CHECK_(condition) \
        -: 1061:    GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
        -: 1062:    if (::testing::internal::IsTrue(condition)) \
        -: 1063:      ; \
        -: 1064:    else \
        -: 1065:      GTEST_LOG_(FATAL) << "Condition " #condition " failed. "
        -: 1066:
        -: 1067:// An all-mode assert to verify that the given POSIX-style function
        -: 1068:// call returns 0 (indicating success).  Known limitation: this
        -: 1069:// doesn't expand to a balanced 'if' statement, so enclose the macro
        -: 1070:// in {} if you need to use it as the only statement in an 'if'
        -: 1071:// branch.
        -: 1072:#define GTEST_CHECK_POSIX_SUCCESS_(posix_call) \
        -: 1073:  if (const int gtest_error = (posix_call)) \
        -: 1074:    GTEST_LOG_(FATAL) << #posix_call << "failed with error " \
        -: 1075:                      << gtest_error
        -: 1076:
        -: 1077:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
        -: 1078://
        -: 1079:// Use ImplicitCast_ as a safe version of static_cast for upcasting in
        -: 1080:// the type hierarchy (e.g. casting a Foo* to a SuperclassOfFoo* or a
        -: 1081:// const Foo*).  When you use ImplicitCast_, the compiler checks that
        -: 1082:// the cast is safe.  Such explicit ImplicitCast_s are necessary in
        -: 1083:// surprisingly many situations where C++ demands an exact type match
        -: 1084:// instead of an argument type convertable to a target type.
        -: 1085://
        -: 1086:// The syntax for using ImplicitCast_ is the same as for static_cast:
        -: 1087://
        -: 1088://   ImplicitCast_<ToType>(expr)
        -: 1089://
        -: 1090:// ImplicitCast_ would have been part of the C++ standard library,
        -: 1091:// but the proposal was submitted too late.  It will probably make
        -: 1092:// its way into the language in the future.
        -: 1093://
        -: 1094:// This relatively ugly name is intentional. It prevents clashes with
        -: 1095:// similar functions users may have (e.g., implicit_cast). The internal
        -: 1096:// namespace alone is not enough because the function can be found by ADL.
        -: 1097:template<typename To>
        -: 1098:inline To ImplicitCast_(To x) { return x; }
        -: 1099:
        -: 1100:// When you upcast (that is, cast a pointer from type Foo to type
        -: 1101:// SuperclassOfFoo), it's fine to use ImplicitCast_<>, since upcasts
        -: 1102:// always succeed.  When you downcast (that is, cast a pointer from
        -: 1103:// type Foo to type SubclassOfFoo), static_cast<> isn't safe, because
        -: 1104:// how do you know the pointer is really of type SubclassOfFoo?  It
        -: 1105:// could be a bare Foo, or of type DifferentSubclassOfFoo.  Thus,
        -: 1106:// when you downcast, you should use this macro.  In debug mode, we
        -: 1107:// use dynamic_cast<> to double-check the downcast is legal (we die
        -: 1108:// if it's not).  In normal mode, we do the efficient static_cast<>
        -: 1109:// instead.  Thus, it's important to test in debug mode to make sure
        -: 1110:// the cast is legal!
        -: 1111://    This is the only place in the code we should use dynamic_cast<>.
        -: 1112:// In particular, you SHOULDN'T be using dynamic_cast<> in order to
        -: 1113:// do RTTI (eg code like this:
        -: 1114://    if (dynamic_cast<Subclass1>(foo)) HandleASubclass1Object(foo);
        -: 1115://    if (dynamic_cast<Subclass2>(foo)) HandleASubclass2Object(foo);
        -: 1116:// You should design the code some other way not to need this.
        -: 1117://
        -: 1118:// This relatively ugly name is intentional. It prevents clashes with
        -: 1119:// similar functions users may have (e.g., down_cast). The internal
        -: 1120:// namespace alone is not enough because the function can be found by ADL.
        -: 1121:template<typename To, typename From>  // use like this: DownCast_<T*>(foo);
        -: 1122:inline To DownCast_(From* f) {  // so we only accept pointers
        -: 1123:  // Ensures that To is a sub-type of From *.  This test is here only
        -: 1124:  // for compile-time type checking, and has no overhead in an
        -: 1125:  // optimized build at run-time, as it will be optimized away
        -: 1126:  // completely.
        -: 1127:  if (false) {
        -: 1128:    const To to = NULL;
        -: 1129:    ::testing::internal::ImplicitCast_<From*>(to);
        -: 1130:  }
        -: 1131:
        -: 1132:#if GTEST_HAS_RTTI
        -: 1133:  // RTTI: debug mode only!
        -: 1134:  GTEST_CHECK_(f == NULL || dynamic_cast<To>(f) != NULL);
        -: 1135:#endif
        -: 1136:  return static_cast<To>(f);
        -: 1137:}
        -: 1138:
        -: 1139:// Downcasts the pointer of type Base to Derived.
        -: 1140:// Derived must be a subclass of Base. The parameter MUST
        -: 1141:// point to a class of type Derived, not any subclass of it.
        -: 1142:// When RTTI is available, the function performs a runtime
        -: 1143:// check to enforce this.
        -: 1144:template <class Derived, class Base>
        -: 1145:Derived* CheckedDowncastToActualType(Base* base) {
        -: 1146:#if GTEST_HAS_RTTI
        -: 1147:  GTEST_CHECK_(typeid(*base) == typeid(Derived));
        -: 1148:  return dynamic_cast<Derived*>(base);  // NOLINT
        -: 1149:#else
        -: 1150:  return static_cast<Derived*>(base);  // Poor man's downcast.
        -: 1151:#endif
        -: 1152:}
        -: 1153:
        -: 1154:#if GTEST_HAS_STREAM_REDIRECTION
        -: 1155:
        -: 1156:// Defines the stderr capturer:
        -: 1157://   CaptureStdout     - starts capturing stdout.
        -: 1158://   GetCapturedStdout - stops capturing stdout and returns the captured string.
        -: 1159://   CaptureStderr     - starts capturing stderr.
        -: 1160://   GetCapturedStderr - stops capturing stderr and returns the captured string.
        -: 1161://
        -: 1162:GTEST_API_ void CaptureStdout();
        -: 1163:GTEST_API_ std::string GetCapturedStdout();
        -: 1164:GTEST_API_ void CaptureStderr();
        -: 1165:GTEST_API_ std::string GetCapturedStderr();
        -: 1166:
        -: 1167:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -: 1168:
        -: 1169:
        -: 1170:#if GTEST_HAS_DEATH_TEST
        -: 1171:
        -: 1172:const ::std::vector<testing::internal::string>& GetInjectableArgvs();
        -: 1173:void SetInjectableArgvs(const ::std::vector<testing::internal::string>*
        -: 1174:                             new_argvs);
        -: 1175:
        -: 1176:// A copy of all command line arguments.  Set by InitGoogleTest().
        -: 1177:extern ::std::vector<testing::internal::string> g_argvs;
        -: 1178:
        -: 1179:#endif  // GTEST_HAS_DEATH_TEST
        -: 1180:
        -: 1181:// Defines synchronization primitives.
        -: 1182:
        -: 1183:#if GTEST_HAS_PTHREAD
        -: 1184:
        -: 1185:// Sleeps for (roughly) n milli-seconds.  This function is only for
        -: 1186:// testing Google Test's own constructs.  Don't use it in user tests,
        -: 1187:// either directly or indirectly.
        -: 1188:inline void SleepMilliseconds(int n) {
        -: 1189:  const timespec time = {
        -: 1190:    0,                  // 0 seconds.
        -: 1191:    n * 1000L * 1000L,  // And n ms.
        -: 1192:  };
        -: 1193:  nanosleep(&time, NULL);
        -: 1194:}
        -: 1195:
        -: 1196:// Allows a controller thread to pause execution of newly created
        -: 1197:// threads until notified.  Instances of this class must be created
        -: 1198:// and destroyed in the controller thread.
        -: 1199://
        -: 1200:// This class is only for testing Google Test's own constructs. Do not
        -: 1201:// use it in user tests, either directly or indirectly.
        -: 1202:class Notification {
        -: 1203: public:
        -: 1204:  Notification() : notified_(false) {
        -: 1205:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&mutex_, NULL));
        -: 1206:  }
        -: 1207:  ~Notification() {
        -: 1208:    pthread_mutex_destroy(&mutex_);
        -: 1209:  }
        -: 1210:
        -: 1211:  // Notifies all threads created with this notification to start. Must
        -: 1212:  // be called from the controller thread.
        -: 1213:  void Notify() {
        -: 1214:    pthread_mutex_lock(&mutex_);
        -: 1215:    notified_ = true;
        -: 1216:    pthread_mutex_unlock(&mutex_);
        -: 1217:  }
        -: 1218:
        -: 1219:  // Blocks until the controller thread notifies. Must be called from a test
        -: 1220:  // thread.
        -: 1221:  void WaitForNotification() {
        -: 1222:    for (;;) {
        -: 1223:      pthread_mutex_lock(&mutex_);
        -: 1224:      const bool notified = notified_;
        -: 1225:      pthread_mutex_unlock(&mutex_);
        -: 1226:      if (notified)
        -: 1227:        break;
        -: 1228:      SleepMilliseconds(10);
        -: 1229:    }
        -: 1230:  }
        -: 1231:
        -: 1232: private:
        -: 1233:  pthread_mutex_t mutex_;
        -: 1234:  bool notified_;
        -: 1235:
        -: 1236:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Notification);
        -: 1237:};
        -: 1238:
        -: 1239:// As a C-function, ThreadFuncWithCLinkage cannot be templated itself.
        -: 1240:// Consequently, it cannot select a correct instantiation of ThreadWithParam
        -: 1241:// in order to call its Run(). Introducing ThreadWithParamBase as a
        -: 1242:// non-templated base class for ThreadWithParam allows us to bypass this
        -: 1243:// problem.
        -: 1244:class ThreadWithParamBase {
        -: 1245: public:
        -: 1246:  virtual ~ThreadWithParamBase() {}
        -: 1247:  virtual void Run() = 0;
        -: 1248:};
        -: 1249:
        -: 1250:// pthread_create() accepts a pointer to a function type with the C linkage.
        -: 1251:// According to the Standard (7.5/1), function types with different linkages
        -: 1252:// are different even if they are otherwise identical.  Some compilers (for
        -: 1253:// example, SunStudio) treat them as different types.  Since class methods
        -: 1254:// cannot be defined with C-linkage we need to define a free C-function to
        -: 1255:// pass into pthread_create().
        -: 1256:extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {
        -: 1257:  static_cast<ThreadWithParamBase*>(thread)->Run();
        -: 1258:  return NULL;
        -: 1259:}
        -: 1260:
        -: 1261:// Helper class for testing Google Test's multi-threading constructs.
        -: 1262:// To use it, write:
        -: 1263://
        -: 1264://   void ThreadFunc(int param) { /* Do things with param */ }
        -: 1265://   Notification thread_can_start;
        -: 1266://   ...
        -: 1267://   // The thread_can_start parameter is optional; you can supply NULL.
        -: 1268://   ThreadWithParam<int> thread(&ThreadFunc, 5, &thread_can_start);
        -: 1269://   thread_can_start.Notify();
        -: 1270://
        -: 1271:// These classes are only for testing Google Test's own constructs. Do
        -: 1272:// not use them in user tests, either directly or indirectly.
        -: 1273:template <typename T>
        -: 1274:class ThreadWithParam : public ThreadWithParamBase {
        -: 1275: public:
        -: 1276:  typedef void (*UserThreadFunc)(T);
        -: 1277:
        -: 1278:  ThreadWithParam(
        -: 1279:      UserThreadFunc func, T param, Notification* thread_can_start)
        -: 1280:      : func_(func),
        -: 1281:        param_(param),
        -: 1282:        thread_can_start_(thread_can_start),
        -: 1283:        finished_(false) {
        -: 1284:    ThreadWithParamBase* const base = this;
        -: 1285:    // The thread can be created only after all fields except thread_
        -: 1286:    // have been initialized.
        -: 1287:    GTEST_CHECK_POSIX_SUCCESS_(
        -: 1288:        pthread_create(&thread_, 0, &ThreadFuncWithCLinkage, base));
        -: 1289:  }
        -: 1290:  ~ThreadWithParam() { Join(); }
        -: 1291:
        -: 1292:  void Join() {
        -: 1293:    if (!finished_) {
        -: 1294:      GTEST_CHECK_POSIX_SUCCESS_(pthread_join(thread_, 0));
        -: 1295:      finished_ = true;
        -: 1296:    }
        -: 1297:  }
        -: 1298:
        -: 1299:  virtual void Run() {
        -: 1300:    if (thread_can_start_ != NULL)
        -: 1301:      thread_can_start_->WaitForNotification();
        -: 1302:    func_(param_);
        -: 1303:  }
        -: 1304:
        -: 1305: private:
        -: 1306:  const UserThreadFunc func_;  // User-supplied thread function.
        -: 1307:  const T param_;  // User-supplied parameter to the thread function.
        -: 1308:  // When non-NULL, used to block execution until the controller thread
        -: 1309:  // notifies.
        -: 1310:  Notification* const thread_can_start_;
        -: 1311:  bool finished_;  // true iff we know that the thread function has finished.
        -: 1312:  pthread_t thread_;  // The native thread object.
        -: 1313:
        -: 1314:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadWithParam);
        -: 1315:};
        -: 1316:
        -: 1317:// MutexBase and Mutex implement mutex on pthreads-based platforms. They
        -: 1318:// are used in conjunction with class MutexLock:
        -: 1319://
        -: 1320://   Mutex mutex;
        -: 1321://   ...
        -: 1322://   MutexLock lock(&mutex);  // Acquires the mutex and releases it at the end
        -: 1323://                            // of the current scope.
        -: 1324://
        -: 1325:// MutexBase implements behavior for both statically and dynamically
        -: 1326:// allocated mutexes.  Do not use MutexBase directly.  Instead, write
        -: 1327:// the following to define a static mutex:
        -: 1328://
        -: 1329://   GTEST_DEFINE_STATIC_MUTEX_(g_some_mutex);
        -: 1330://
        -: 1331:// You can forward declare a static mutex like this:
        -: 1332://
        -: 1333://   GTEST_DECLARE_STATIC_MUTEX_(g_some_mutex);
        -: 1334://
        -: 1335:// To create a dynamic mutex, just define an object of type Mutex.
        -: 1336:class MutexBase {
        -: 1337: public:
        -: 1338:  // Acquires this mutex.
        -: 1339:  void Lock() {
        -: 1340:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_lock(&mutex_));
        -: 1341:    owner_ = pthread_self();
        -: 1342:    has_owner_ = true;
        -: 1343:  }
        -: 1344:
        -: 1345:  // Releases this mutex.
        -: 1346:  void Unlock() {
        -: 1347:    // Since the lock is being released the owner_ field should no longer be
        -: 1348:    // considered valid. We don't protect writing to has_owner_ here, as it's
        -: 1349:    // the caller's responsibility to ensure that the current thread holds the
        -: 1350:    // mutex when this is called.
        -: 1351:    has_owner_ = false;
        -: 1352:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_unlock(&mutex_));
        -: 1353:  }
        -: 1354:
        -: 1355:  // Does nothing if the current thread holds the mutex. Otherwise, crashes
        -: 1356:  // with high probability.
        -: 1357:  void AssertHeld() const {
        -: 1358:    GTEST_CHECK_(has_owner_ && pthread_equal(owner_, pthread_self()))
        -: 1359:        << "The current thread is not holding the mutex @" << this;
        -: 1360:  }
        -: 1361:
        -: 1362:  // A static mutex may be used before main() is entered.  It may even
        -: 1363:  // be used before the dynamic initialization stage.  Therefore we
        -: 1364:  // must be able to initialize a static mutex object at link time.
        -: 1365:  // This means MutexBase has to be a POD and its member variables
        -: 1366:  // have to be public.
        -: 1367: public:
        -: 1368:  pthread_mutex_t mutex_;  // The underlying pthread mutex.
        -: 1369:  // has_owner_ indicates whether the owner_ field below contains a valid thread
        -: 1370:  // ID and is therefore safe to inspect (e.g., to use in pthread_equal()). All
        -: 1371:  // accesses to the owner_ field should be protected by a check of this field.
        -: 1372:  // An alternative might be to memset() owner_ to all zeros, but there's no
        -: 1373:  // guarantee that a zero'd pthread_t is necessarily invalid or even different
        -: 1374:  // from pthread_self().
        -: 1375:  bool has_owner_;
        -: 1376:  pthread_t owner_;  // The thread holding the mutex.
        -: 1377:};
        -: 1378:
        -: 1379:// Forward-declares a static mutex.
        -: 1380:# define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1381:    extern ::testing::internal::MutexBase mutex
        -: 1382:
        -: 1383:// Defines and statically (i.e. at link time) initializes a static mutex.
        -: 1384:// The initialization list here does not explicitly initialize each field,
        -: 1385:// instead relying on default initialization for the unspecified fields. In
        -: 1386:// particular, the owner_ field (a pthread_t) is not explicitly initialized.
        -: 1387:// This allows initialization to work whether pthread_t is a scalar or struct.
        -: 1388:// The flag -Wmissing-field-initializers must not be specified for this to work.
        -: 1389:# define GTEST_DEFINE_STATIC_MUTEX_(mutex) \
        -: 1390:    ::testing::internal::MutexBase mutex = { PTHREAD_MUTEX_INITIALIZER, false }
        -: 1391:
        -: 1392:// The Mutex class can only be used for mutexes created at runtime. It
        -: 1393:// shares its API with MutexBase otherwise.
        -: 1394:class Mutex : public MutexBase {
        -: 1395: public:
        -: 1396:  Mutex() {
        -: 1397:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&mutex_, NULL));
        -: 1398:    has_owner_ = false;
        -: 1399:  }
        -: 1400:  ~Mutex() {
        -: 1401:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_destroy(&mutex_));
        -: 1402:  }
        -: 1403:
        -: 1404: private:
        -: 1405:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Mutex);
        -: 1406:};
        -: 1407:
        -: 1408:// We cannot name this class MutexLock as the ctor declaration would
        -: 1409:// conflict with a macro named MutexLock, which is defined on some
        -: 1410:// platforms.  Hence the typedef trick below.
        -: 1411:class GTestMutexLock {
        -: 1412: public:
        -: 1413:  explicit GTestMutexLock(MutexBase* mutex)
        -: 1414:      : mutex_(mutex) { mutex_->Lock(); }
        -: 1415:
        -: 1416:  ~GTestMutexLock() { mutex_->Unlock(); }
        -: 1417:
        -: 1418: private:
        -: 1419:  MutexBase* const mutex_;
        -: 1420:
        -: 1421:  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestMutexLock);
        -: 1422:};
        -: 1423:
        -: 1424:typedef GTestMutexLock MutexLock;
        -: 1425:
        -: 1426:// Helpers for ThreadLocal.
        -: 1427:
        -: 1428:// pthread_key_create() requires DeleteThreadLocalValue() to have
        -: 1429:// C-linkage.  Therefore it cannot be templatized to access
        -: 1430:// ThreadLocal<T>.  Hence the need for class
        -: 1431:// ThreadLocalValueHolderBase.
        -: 1432:class ThreadLocalValueHolderBase {
        -: 1433: public:
        -: 1434:  virtual ~ThreadLocalValueHolderBase() {}
        -: 1435:};
        -: 1436:
        -: 1437:// Called by pthread to delete thread-local data stored by
        -: 1438:// pthread_setspecific().
        -: 1439:extern "C" inline void DeleteThreadLocalValue(void* value_holder) {
        -: 1440:  delete static_cast<ThreadLocalValueHolderBase*>(value_holder);
        -: 1441:}
        -: 1442:
        -: 1443:// Implements thread-local storage on pthreads-based systems.
        -: 1444://
        -: 1445://   // Thread 1
        -: 1446://   ThreadLocal<int> tl(100);  // 100 is the default value for each thread.
        -: 1447://
        -: 1448://   // Thread 2
        -: 1449://   tl.set(150);  // Changes the value for thread 2 only.
        -: 1450://   EXPECT_EQ(150, tl.get());
        -: 1451://
        -: 1452://   // Thread 1
        -: 1453://   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.
        -: 1454://   tl.set(200);
        -: 1455://   EXPECT_EQ(200, tl.get());
        -: 1456://
        -: 1457:// The template type argument T must have a public copy constructor.
        -: 1458:// In addition, the default ThreadLocal constructor requires T to have
        -: 1459:// a public default constructor.
        -: 1460://
        -: 1461:// An object managed for a thread by a ThreadLocal instance is deleted
        -: 1462:// when the thread exits.  Or, if the ThreadLocal instance dies in
        -: 1463:// that thread, when the ThreadLocal dies.  It's the user's
        -: 1464:// responsibility to ensure that all other threads using a ThreadLocal
        -: 1465:// have exited when it dies, or the per-thread objects for those
        -: 1466:// threads will not be deleted.
        -: 1467://
        -: 1468:// Google Test only uses global ThreadLocal objects.  That means they
        -: 1469:// will die after main() has returned.  Therefore, no per-thread
        -: 1470:// object managed by Google Test will be leaked as long as all threads
        -: 1471:// using Google Test have exited when main() returns.
        -: 1472:template <typename T>
        -: 1473:class ThreadLocal {
        -: 1474: public:
        -: 1475:  ThreadLocal() : key_(CreateKey()),
        -: 1476:                  default_() {}
        -: 1477:  explicit ThreadLocal(const T& value) : key_(CreateKey()),
        -: 1478:                                         default_(value) {}
        -: 1479:
        -: 1480:  ~ThreadLocal() {
        -: 1481:    // Destroys the managed object for the current thread, if any.
        -: 1482:    DeleteThreadLocalValue(pthread_getspecific(key_));
        -: 1483:
        -: 1484:    // Releases resources associated with the key.  This will *not*
        -: 1485:    // delete managed objects for other threads.
        -: 1486:    GTEST_CHECK_POSIX_SUCCESS_(pthread_key_delete(key_));
        -: 1487:  }
        -: 1488:
        -: 1489:  T* pointer() { return GetOrCreateValue(); }
        -: 1490:  const T* pointer() const { return GetOrCreateValue(); }
        -: 1491:  const T& get() const { return *pointer(); }
        -: 1492:  void set(const T& value) { *pointer() = value; }
        -: 1493:
        -: 1494: private:
        -: 1495:  // Holds a value of type T.
        -: 1496:  class ValueHolder : public ThreadLocalValueHolderBase {
        -: 1497:   public:
        -: 1498:    explicit ValueHolder(const T& value) : value_(value) {}
        -: 1499:
        -: 1500:    T* pointer() { return &value_; }
        -: 1501:
        -: 1502:   private:
        -: 1503:    T value_;
        -: 1504:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolder);
        -: 1505:  };
        -: 1506:
        -: 1507:  static pthread_key_t CreateKey() {
        -: 1508:    pthread_key_t key;
        -: 1509:    // When a thread exits, DeleteThreadLocalValue() will be called on
        -: 1510:    // the object managed for that thread.
        -: 1511:    GTEST_CHECK_POSIX_SUCCESS_(
        -: 1512:        pthread_key_create(&key, &DeleteThreadLocalValue));
        -: 1513:    return key;
        -: 1514:  }
        -: 1515:
        -: 1516:  T* GetOrCreateValue() const {
        -: 1517:    ThreadLocalValueHolderBase* const holder =
        -: 1518:        static_cast<ThreadLocalValueHolderBase*>(pthread_getspecific(key_));
        -: 1519:    if (holder != NULL) {
        -: 1520:      return CheckedDowncastToActualType<ValueHolder>(holder)->pointer();
        -: 1521:    }
        -: 1522:
        -: 1523:    ValueHolder* const new_holder = new ValueHolder(default_);
        -: 1524:    ThreadLocalValueHolderBase* const holder_base = new_holder;
        -: 1525:    GTEST_CHECK_POSIX_SUCCESS_(pthread_setspecific(key_, holder_base));
        -: 1526:    return new_holder->pointer();
        -: 1527:  }
        -: 1528:
        -: 1529:  // A key pthreads uses for looking up per-thread values.
        -: 1530:  const pthread_key_t key_;
        -: 1531:  const T default_;  // The default value for each thread.
        -: 1532:
        -: 1533:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocal);
        -: 1534:};
        -: 1535:
        -: 1536:# define GTEST_IS_THREADSAFE 1
        -: 1537:
        -: 1538:#else  // GTEST_HAS_PTHREAD
        -: 1539:
        -: 1540:// A dummy implementation of synchronization primitives (mutex, lock,
        -: 1541:// and thread-local variable).  Necessary for compiling Google Test where
        -: 1542:// mutex is not supported - using Google Test in multiple threads is not
        -: 1543:// supported on such platforms.
        -: 1544:
        -: 1545:class Mutex {
        -: 1546: public:
        -: 1547:  Mutex() {}
        -: 1548:  void Lock() {}
        -: 1549:  void Unlock() {}
        -: 1550:  void AssertHeld() const {}
        -: 1551:};
        -: 1552:
        -: 1553:# define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1554:  extern ::testing::internal::Mutex mutex
        -: 1555:
        -: 1556:# define GTEST_DEFINE_STATIC_MUTEX_(mutex) ::testing::internal::Mutex mutex
        -: 1557:
        -: 1558:class GTestMutexLock {
        -: 1559: public:
        -: 1560:  explicit GTestMutexLock(Mutex*) {}  // NOLINT
        -: 1561:};
        -: 1562:
        -: 1563:typedef GTestMutexLock MutexLock;
        -: 1564:
        -: 1565:template <typename T>
        -: 1566:class ThreadLocal {
        -: 1567: public:
        -: 1568:  ThreadLocal() : value_() {}
        -: 1569:  explicit ThreadLocal(const T& value) : value_(value) {}
        -: 1570:  T* pointer() { return &value_; }
        -: 1571:  const T* pointer() const { return &value_; }
        -: 1572:  const T& get() const { return value_; }
        -: 1573:  void set(const T& value) { value_ = value; }
        -: 1574: private:
        -: 1575:  T value_;
        -: 1576:};
        -: 1577:
        -: 1578:// The above synchronization primitives have dummy implementations.
        -: 1579:// Therefore Google Test is not thread-safe.
        -: 1580:# define GTEST_IS_THREADSAFE 0
        -: 1581:
        -: 1582:#endif  // GTEST_HAS_PTHREAD
        -: 1583:
        -: 1584:// Returns the number of threads running in the process, or 0 to indicate that
        -: 1585:// we cannot detect it.
        -: 1586:GTEST_API_ size_t GetThreadCount();
        -: 1587:
        -: 1588:// Passing non-POD classes through ellipsis (...) crashes the ARM
        -: 1589:// compiler and generates a warning in Sun Studio.  The Nokia Symbian
        -: 1590:// and the IBM XL C/C++ compiler try to instantiate a copy constructor
        -: 1591:// for objects passed through ellipsis (...), failing for uncopyable
        -: 1592:// objects.  We define this to ensure that only POD is passed through
        -: 1593:// ellipsis on these systems.
        -: 1594:#if defined(__SYMBIAN32__) || defined(__IBMCPP__) || defined(__SUNPRO_CC)
        -: 1595:// We lose support for NULL detection where the compiler doesn't like
        -: 1596:// passing non-POD classes through ellipsis (...).
        -: 1597:# define GTEST_ELLIPSIS_NEEDS_POD_ 1
        -: 1598:#else
        -: 1599:# define GTEST_CAN_COMPARE_NULL 1
        -: 1600:#endif
        -: 1601:
        -: 1602:// The Nokia Symbian and IBM XL C/C++ compilers cannot decide between
        -: 1603:// const T& and const T* in a function template.  These compilers
        -: 1604:// _can_ decide between class template specializations for T and T*,
        -: 1605:// so a tr1::type_traits-like is_pointer works.
        -: 1606:#if defined(__SYMBIAN32__) || defined(__IBMCPP__)
        -: 1607:# define GTEST_NEEDS_IS_POINTER_ 1
        -: 1608:#endif
        -: 1609:
        -: 1610:template <bool bool_value>
        -: 1611:struct bool_constant {
        -: 1612:  typedef bool_constant<bool_value> type;
        -: 1613:  static const bool value = bool_value;
        -: 1614:};
        -: 1615:template <bool bool_value> const bool bool_constant<bool_value>::value;
        -: 1616:
        -: 1617:typedef bool_constant<false> false_type;
        -: 1618:typedef bool_constant<true> true_type;
        -: 1619:
        -: 1620:template <typename T>
        -: 1621:struct is_pointer : public false_type {};
        -: 1622:
        -: 1623:template <typename T>
        -: 1624:struct is_pointer<T*> : public true_type {};
        -: 1625:
        -: 1626:template <typename Iterator>
        -: 1627:struct IteratorTraits {
        -: 1628:  typedef typename Iterator::value_type value_type;
        -: 1629:};
        -: 1630:
        -: 1631:template <typename T>
        -: 1632:struct IteratorTraits<T*> {
        -: 1633:  typedef T value_type;
        -: 1634:};
        -: 1635:
        -: 1636:template <typename T>
        -: 1637:struct IteratorTraits<const T*> {
        -: 1638:  typedef T value_type;
        -: 1639:};
        -: 1640:
        -: 1641:#if GTEST_OS_WINDOWS
        -: 1642:# define GTEST_PATH_SEP_ "\\"
        -: 1643:# define GTEST_HAS_ALT_PATH_SEP_ 1
        -: 1644:// The biggest signed integer type the compiler supports.
        -: 1645:typedef __int64 BiggestInt;
        -: 1646:#else
        -: 1647:# define GTEST_PATH_SEP_ "/"
        -: 1648:# define GTEST_HAS_ALT_PATH_SEP_ 0
        -: 1649:typedef long long BiggestInt;  // NOLINT
        -: 1650:#endif  // GTEST_OS_WINDOWS
        -: 1651:
        -: 1652:// Utilities for char.
        -: 1653:
        -: 1654:// isspace(int ch) and friends accept an unsigned char or EOF.  char
        -: 1655:// may be signed, depending on the compiler (or compiler flags).
        -: 1656:// Therefore we need to cast a char to unsigned char before calling
        -: 1657:// isspace(), etc.
        -: 1658:
        -: 1659:inline bool IsAlpha(char ch) {
        -: 1660:  return isalpha(static_cast<unsigned char>(ch)) != 0;
        -: 1661:}
        -: 1662:inline bool IsAlNum(char ch) {
        -: 1663:  return isalnum(static_cast<unsigned char>(ch)) != 0;
        -: 1664:}
        -: 1665:inline bool IsDigit(char ch) {
        -: 1666:  return isdigit(static_cast<unsigned char>(ch)) != 0;
        -: 1667:}
        -: 1668:inline bool IsLower(char ch) {
        -: 1669:  return islower(static_cast<unsigned char>(ch)) != 0;
        -: 1670:}
        -: 1671:inline bool IsSpace(char ch) {
        -: 1672:  return isspace(static_cast<unsigned char>(ch)) != 0;
        -: 1673:}
        -: 1674:inline bool IsUpper(char ch) {
        -: 1675:  return isupper(static_cast<unsigned char>(ch)) != 0;
        -: 1676:}
        -: 1677:inline bool IsXDigit(char ch) {
        -: 1678:  return isxdigit(static_cast<unsigned char>(ch)) != 0;
        -: 1679:}
        -: 1680:inline bool IsXDigit(wchar_t ch) {
        -: 1681:  const unsigned char low_byte = static_cast<unsigned char>(ch);
        -: 1682:  return ch == low_byte && isxdigit(low_byte) != 0;
        -: 1683:}
        -: 1684:
        -: 1685:inline char ToLower(char ch) {
        -: 1686:  return static_cast<char>(tolower(static_cast<unsigned char>(ch)));
        -: 1687:}
        -: 1688:inline char ToUpper(char ch) {
        -: 1689:  return static_cast<char>(toupper(static_cast<unsigned char>(ch)));
        -: 1690:}
        -: 1691:
        -: 1692:// The testing::internal::posix namespace holds wrappers for common
        -: 1693:// POSIX functions.  These wrappers hide the differences between
        -: 1694:// Windows/MSVC and POSIX systems.  Since some compilers define these
        -: 1695:// standard functions as macros, the wrapper cannot have the same name
        -: 1696:// as the wrapped function.
        -: 1697:
        -: 1698:namespace posix {
        -: 1699:
        -: 1700:// Functions with a different name on Windows.
        -: 1701:
        -: 1702:#if GTEST_OS_WINDOWS
        -: 1703:
        -: 1704:typedef struct _stat StatStruct;
        -: 1705:
        -: 1706:# ifdef __BORLANDC__
        -: 1707:inline int IsATTY(int fd) { return isatty(fd); }
        -: 1708:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 1709:  return stricmp(s1, s2);
        -: 1710:}
        -: 1711:inline char* StrDup(const char* src) { return strdup(src); }
        -: 1712:# else  // !__BORLANDC__
        -: 1713:#  if GTEST_OS_WINDOWS_MOBILE
        -: 1714:inline int IsATTY(int /* fd */) { return 0; }
        -: 1715:#  else
        -: 1716:inline int IsATTY(int fd) { return _isatty(fd); }
        -: 1717:#  endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1718:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 1719:  return _stricmp(s1, s2);
        -: 1720:}
        -: 1721:inline char* StrDup(const char* src) { return _strdup(src); }
        -: 1722:# endif  // __BORLANDC__
        -: 1723:
        -: 1724:# if GTEST_OS_WINDOWS_MOBILE
        -: 1725:inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }
        -: 1726:// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this
        -: 1727:// time and thus not defined there.
        -: 1728:# else
        -: 1729:inline int FileNo(FILE* file) { return _fileno(file); }
        -: 1730:inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }
        -: 1731:inline int RmDir(const char* dir) { return _rmdir(dir); }
        -: 1732:inline bool IsDir(const StatStruct& st) {
        -: 1733:  return (_S_IFDIR & st.st_mode) != 0;
        -: 1734:}
        -: 1735:# endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1736:
        -: 1737:#else
        -: 1738:
        -: 1739:typedef struct stat StatStruct;
        -: 1740:
        -: 1741:inline int FileNo(FILE* file) { return fileno(file); }
        -: 1742:inline int IsATTY(int fd) { return isatty(fd); }
        -: 1743:inline int Stat(const char* path, StatStruct* buf) { return stat(path, buf); }
        -: 1744:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 1745:  return strcasecmp(s1, s2);
        -: 1746:}
        -: 1747:inline char* StrDup(const char* src) { return strdup(src); }
        -: 1748:inline int RmDir(const char* dir) { return rmdir(dir); }
        -: 1749:inline bool IsDir(const StatStruct& st) { return S_ISDIR(st.st_mode); }
        -: 1750:
        -: 1751:#endif  // GTEST_OS_WINDOWS
        -: 1752:
        -: 1753:// Functions deprecated by MSVC 8.0.
        -: 1754:
        -: 1755:#ifdef _MSC_VER
        -: 1756:// Temporarily disable warning 4996 (deprecated function).
        -: 1757:# pragma warning(push)
        -: 1758:# pragma warning(disable:4996)
        -: 1759:#endif
        -: 1760:
        -: 1761:inline const char* StrNCpy(char* dest, const char* src, size_t n) {
        -: 1762:  return strncpy(dest, src, n);
        -: 1763:}
        -: 1764:
        -: 1765:// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and
        -: 1766:// StrError() aren't needed on Windows CE at this time and thus not
        -: 1767:// defined there.
        -: 1768:
        -: 1769:#if !GTEST_OS_WINDOWS_MOBILE
        -: 1770:inline int ChDir(const char* dir) { return chdir(dir); }
        -: 1771:#endif
        -: 1772:inline FILE* FOpen(const char* path, const char* mode) {
        -: 1773:  return fopen(path, mode);
        -: 1774:}
        -: 1775:#if !GTEST_OS_WINDOWS_MOBILE
        -: 1776:inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {
        -: 1777:  return freopen(path, mode, stream);
        -: 1778:}
        -: 1779:inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }
        -: 1780:#endif
        -: 1781:inline int FClose(FILE* fp) { return fclose(fp); }
        -: 1782:#if !GTEST_OS_WINDOWS_MOBILE
        -: 1783:inline int Read(int fd, void* buf, unsigned int count) {
        -: 1784:  return static_cast<int>(read(fd, buf, count));
        -: 1785:}
        -: 1786:inline int Write(int fd, const void* buf, unsigned int count) {
        -: 1787:  return static_cast<int>(write(fd, buf, count));
        -: 1788:}
        -: 1789:inline int Close(int fd) { return close(fd); }
        -: 1790:inline const char* StrError(int errnum) { return strerror(errnum); }
        -: 1791:#endif
        -: 1792:inline const char* GetEnv(const char* name) {
        -: 1793:#if GTEST_OS_WINDOWS_MOBILE
        -: 1794:  // We are on Windows CE, which has no environment variables.
        -: 1795:  return NULL;
        -: 1796:#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)
        -: 1797:  // Environment variables which we programmatically clear will be set to the
        -: 1798:  // empty string rather than unset (NULL).  Handle that case.
        -: 1799:  const char* const env = getenv(name);
        -: 1800:  return (env != NULL && env[0] != '\0') ? env : NULL;
        -: 1801:#else
        -: 1802:  return getenv(name);
        -: 1803:#endif
        -: 1804:}
        -: 1805:
        -: 1806:#ifdef _MSC_VER
        -: 1807:# pragma warning(pop)  // Restores the warning state.
        -: 1808:#endif
        -: 1809:
        -: 1810:#if GTEST_OS_WINDOWS_MOBILE
        -: 1811:// Windows CE has no C library. The abort() function is used in
        -: 1812:// several places in Google Test. This implementation provides a reasonable
        -: 1813:// imitation of standard behaviour.
        -: 1814:void Abort();
        -: 1815:#else
        -: 1816:inline void Abort() { abort(); }
        -: 1817:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1818:
        -: 1819:}  // namespace posix
        -: 1820:
        -: 1821:// MSVC "deprecates" snprintf and issues warnings wherever it is used.  In
        -: 1822:// order to avoid these warnings, we need to use _snprintf or _snprintf_s on
        -: 1823:// MSVC-based platforms.  We map the GTEST_SNPRINTF_ macro to the appropriate
        -: 1824:// function in order to achieve that.  We use macro definition here because
        -: 1825:// snprintf is a variadic function.
        -: 1826:#if _MSC_VER >= 1400 && !GTEST_OS_WINDOWS_MOBILE
        -: 1827:// MSVC 2005 and above support variadic macros.
        -: 1828:# define GTEST_SNPRINTF_(buffer, size, format, ...) \
        -: 1829:     _snprintf_s(buffer, size, size, format, __VA_ARGS__)
        -: 1830:#elif defined(_MSC_VER)
        -: 1831:// Windows CE does not define _snprintf_s and MSVC prior to 2005 doesn't
        -: 1832:// complain about _snprintf.
        -: 1833:# define GTEST_SNPRINTF_ _snprintf
        -: 1834:#else
        -: 1835:# define GTEST_SNPRINTF_ snprintf
        -: 1836:#endif
        -: 1837:
        -: 1838:// The maximum number a BiggestInt can represent.  This definition
        -: 1839:// works no matter BiggestInt is represented in one's complement or
        -: 1840:// two's complement.
        -: 1841://
        -: 1842:// We cannot rely on numeric_limits in STL, as __int64 and long long
        -: 1843:// are not part of standard C++ and numeric_limits doesn't need to be
        -: 1844:// defined for them.
        -: 1845:const BiggestInt kMaxBiggestInt =
        -: 1846:    ~(static_cast<BiggestInt>(1) << (8*sizeof(BiggestInt) - 1));
        -: 1847:
        -: 1848:// This template class serves as a compile-time function from size to
        -: 1849:// type.  It maps a size in bytes to a primitive type with that
        -: 1850:// size. e.g.
        -: 1851://
        -: 1852://   TypeWithSize<4>::UInt
        -: 1853://
        -: 1854:// is typedef-ed to be unsigned int (unsigned integer made up of 4
        -: 1855:// bytes).
        -: 1856://
        -: 1857:// Such functionality should belong to STL, but I cannot find it
        -: 1858:// there.
        -: 1859://
        -: 1860:// Google Test uses this class in the implementation of floating-point
        -: 1861:// comparison.
        -: 1862://
        -: 1863:// For now it only handles UInt (unsigned int) as that's all Google Test
        -: 1864:// needs.  Other types can be easily added in the future if need
        -: 1865:// arises.
        -: 1866:template <size_t size>
        -: 1867:class TypeWithSize {
        -: 1868: public:
        -: 1869:  // This prevents the user from using TypeWithSize<N> with incorrect
        -: 1870:  // values of N.
        -: 1871:  typedef void UInt;
        -: 1872:};
        -: 1873:
        -: 1874:// The specialization for size 4.
        -: 1875:template <>
        -: 1876:class TypeWithSize<4> {
        -: 1877: public:
        -: 1878:  // unsigned int has size 4 in both gcc and MSVC.
        -: 1879:  //
        -: 1880:  // As base/basictypes.h doesn't compile on Windows, we cannot use
        -: 1881:  // uint32, uint64, and etc here.
        -: 1882:  typedef int Int;
        -: 1883:  typedef unsigned int UInt;
        -: 1884:};
        -: 1885:
        -: 1886:// The specialization for size 8.
        -: 1887:template <>
        -: 1888:class TypeWithSize<8> {
        -: 1889: public:
        -: 1890:#if GTEST_OS_WINDOWS
        -: 1891:  typedef __int64 Int;
        -: 1892:  typedef unsigned __int64 UInt;
        -: 1893:#else
        -: 1894:  typedef long long Int;  // NOLINT
        -: 1895:  typedef unsigned long long UInt;  // NOLINT
        -: 1896:#endif  // GTEST_OS_WINDOWS
        -: 1897:};
        -: 1898:
        -: 1899:// Integer types of known sizes.
        -: 1900:typedef TypeWithSize<4>::Int Int32;
        -: 1901:typedef TypeWithSize<4>::UInt UInt32;
        -: 1902:typedef TypeWithSize<8>::Int Int64;
        -: 1903:typedef TypeWithSize<8>::UInt UInt64;
        -: 1904:typedef TypeWithSize<8>::Int TimeInMillis;  // Represents time in milliseconds.
        -: 1905:
        -: 1906:// Utilities for command line flags and environment variables.
        -: 1907:
        -: 1908:// Macro for referencing flags.
        -: 1909:#define GTEST_FLAG(name) FLAGS_gtest_##name
        -: 1910:
        -: 1911:// Macros for declaring flags.
        -: 1912:#define GTEST_DECLARE_bool_(name) GTEST_API_ extern bool GTEST_FLAG(name)
        -: 1913:#define GTEST_DECLARE_int32_(name) \
        -: 1914:    GTEST_API_ extern ::testing::internal::Int32 GTEST_FLAG(name)
        -: 1915:#define GTEST_DECLARE_string_(name) \
        -: 1916:    GTEST_API_ extern ::std::string GTEST_FLAG(name)
        -: 1917:
        -: 1918:// Macros for defining flags.
        -: 1919:#define GTEST_DEFINE_bool_(name, default_val, doc) \
        -: 1920:    GTEST_API_ bool GTEST_FLAG(name) = (default_val)
        -: 1921:#define GTEST_DEFINE_int32_(name, default_val, doc) \
        -: 1922:    GTEST_API_ ::testing::internal::Int32 GTEST_FLAG(name) = (default_val)
        -: 1923:#define GTEST_DEFINE_string_(name, default_val, doc) \
        -: 1924:    GTEST_API_ ::std::string GTEST_FLAG(name) = (default_val)
        -: 1925:
        -: 1926:// Thread annotations
        -: 1927:#define GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)
        -: 1928:#define GTEST_LOCK_EXCLUDED_(locks)
        -: 1929:
        -: 1930:// Parses 'str' for a 32-bit signed integer.  If successful, writes the result
        -: 1931:// to *value and returns true; otherwise leaves *value unchanged and returns
        -: 1932:// false.
        -: 1933:// TODO(chandlerc): Find a better way to refactor flag and environment parsing
        -: 1934:// out of both gtest-port.cc and gtest.cc to avoid exporting this utility
        -: 1935:// function.
        -: 1936:bool ParseInt32(const Message& src_text, const char* str, Int32* value);
        -: 1937:
        -: 1938:// Parses a bool/Int32/string from the environment variable
        -: 1939:// corresponding to the given Google Test flag.
        -: 1940:bool BoolFromGTestEnv(const char* flag, bool default_val);
        -: 1941:GTEST_API_ Int32 Int32FromGTestEnv(const char* flag, Int32 default_val);
        -: 1942:const char* StringFromGTestEnv(const char* flag, const char* default_val);
        -: 1943:
        -: 1944:}  // namespace internal
        -: 1945:}  // namespace testing
        -: 1946:
        -: 1947:#endif  // GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
