        -:    0:Source:src/time_zone_impl.h
        -:    0:Graph:/home/yfy/iut/benchmarks/cctz/time_zone_impl.gcno
        -:    0:Data:/home/yfy/iut/benchmarks/cctz/time_zone_impl.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:// Copyright 2016 Google Inc. All Rights Reserved.
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://   http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9://   Unless required by applicable law or agreed to in writing, software
        -:   10://   distributed under the License is distributed on an "AS IS" BASIS,
        -:   11://   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12://   See the License for the specific language governing permissions and
        -:   13://   limitations under the License.
        -:   14:
        -:   15:#ifndef CCTZ_TIME_ZONE_IMPL_H_
        -:   16:#define CCTZ_TIME_ZONE_IMPL_H_
        -:   17:
        -:   18:#include <memory>
        -:   19:#include <string>
        -:   20:
        -:   21:#include "time_zone.h"
        -:   22:#include "time_zone_info.h"
        -:   23:
        -:   24:namespace cctz {
        -:   25:
        -:   26:// time_zone::Impl is the internal object referenced by a cctz::time_zone.
function _ZN4cctz9time_zone4ImplD2Ev called 24 returned 100% blocks executed 60%
       48:   27:class time_zone::Impl {
        -:   28: public:
        -:   29:  // Load a named time zone. Returns false if the name is invalid, or if
        -:   30:  // some other kind of error occurs. Note that loading "UTC" never fails.
        -:   31:  static bool LoadTimeZone(const std::string& name, time_zone* tz);
        -:   32:
        -:   33:  // Dereferences the time_zone to obtain its Impl.
        -:   34:  static const time_zone::Impl& get(const time_zone& tz);
        -:   35:
        -:   36:  // Breaks a time_point down to civil-time components in this time zone.
        -:   37:  time_zone::absolute_lookup BreakTime(const time_point<sys_seconds>& tp) const;
        -:   38:
        -:   39:  // Converts the civil-time components in this time zone into a time_point.
        -:   40:  // That is, the opposite of BreakTime(). The requested civil time may be
        -:   41:  // ambiguous or illegal due to a change of UTC offset.
        -:   42:  time_zone::civil_lookup MakeTimeInfo(civil_second cs) const;
        -:   43:
        -:   44: private:
        -:   45:  explicit Impl(const std::string& name);
        -:   46:
        -:   47:  const std::string name_;
        -:   48:  std::unique_ptr<TimeZoneIf> zone_;
        -:   49:};
        -:   50:
        -:   51:}  // namespace cctz
        -:   52:
        -:   53:#endif  // CCTZ_TIME_ZONE_IMPL_H_
