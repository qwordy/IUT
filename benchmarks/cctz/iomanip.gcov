        -:    0:Source:/usr/include/c++/4.9/iomanip
        -:    0:Graph:/home/yfy/iut/benchmarks/cctz/civil_time_test.gcno
        -:    0:Data:/home/yfy/iut/benchmarks/cctz/civil_time_test.gcda
        -:    0:Runs:42
        -:    0:Programs:1
        -:    1:// Standard stream manipulators -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 1997-2014 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file include/iomanip
        -:   26: *  This is a Standard C++ Library header.
        -:   27: */
        -:   28:
        -:   29://
        -:   30:// ISO C++ 14882: 27.6.3  Standard manipulators
        -:   31://
        -:   32:
        -:   33:#ifndef _GLIBCXX_IOMANIP
        -:   34:#define _GLIBCXX_IOMANIP 1
        -:   35:
        -:   36:#pragma GCC system_header
        -:   37:
        -:   38:#include <bits/c++config.h>
        -:   39:#include <iosfwd>
        -:   40:#include <bits/ios_base.h>
        -:   41:
        -:   42:#if __cplusplus >= 201103L
        -:   43:#include <locale>
        -:   44:#if __cplusplus > 201103L
        -:   45:#include <sstream> // used in quoted.
        -:   46:#endif
        -:   47:#endif
        -:   48:
        -:   49:namespace std _GLIBCXX_VISIBILITY(default)
        -:   50:{
        -:   51:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   52:
        -:   53:  // [27.6.3] standard manipulators
        -:   54:  // Also see DR 183.
        -:   55:
        -:   56:  struct _Resetiosflags { ios_base::fmtflags _M_mask; };
        -:   57:
        -:   58:  /**
        -:   59:   *  @brief  Manipulator for @c setf.
        -:   60:   *  @param  __mask  A format flags mask.
        -:   61:   *
        -:   62:   *  Sent to a stream object, this manipulator resets the specified flags,
        -:   63:   *  via @e stream.setf(0,__mask).
        -:   64:  */
        -:   65:  inline _Resetiosflags 
        -:   66:  resetiosflags(ios_base::fmtflags __mask)
        -:   67:  { return { __mask }; }
        -:   68:
        -:   69:  template<typename _CharT, typename _Traits>
        -:   70:    inline basic_istream<_CharT, _Traits>& 
        -:   71:    operator>>(basic_istream<_CharT, _Traits>& __is, _Resetiosflags __f)
        -:   72:    { 
        -:   73:      __is.setf(ios_base::fmtflags(0), __f._M_mask); 
        -:   74:      return __is; 
        -:   75:    }
        -:   76:
        -:   77:  template<typename _CharT, typename _Traits>
        -:   78:    inline basic_ostream<_CharT, _Traits>& 
        -:   79:    operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)
        -:   80:    { 
        -:   81:      __os.setf(ios_base::fmtflags(0), __f._M_mask); 
        -:   82:      return __os; 
        -:   83:    }
        -:   84:
        -:   85:
        -:   86:  struct _Setiosflags { ios_base::fmtflags _M_mask; };
        -:   87:
        -:   88:  /**
        -:   89:   *  @brief  Manipulator for @c setf.
        -:   90:   *  @param  __mask  A format flags mask.
        -:   91:   *
        -:   92:   *  Sent to a stream object, this manipulator sets the format flags
        -:   93:   *  to @a __mask.
        -:   94:  */
        -:   95:  inline _Setiosflags 
        -:   96:  setiosflags(ios_base::fmtflags __mask)
        -:   97:  { return { __mask }; }
        -:   98:
        -:   99:  template<typename _CharT, typename _Traits>
        -:  100:    inline basic_istream<_CharT, _Traits>& 
        -:  101:    operator>>(basic_istream<_CharT, _Traits>& __is, _Setiosflags __f)
        -:  102:    { 
        -:  103:      __is.setf(__f._M_mask); 
        -:  104:      return __is; 
        -:  105:    }
        -:  106:
        -:  107:  template<typename _CharT, typename _Traits>
        -:  108:    inline basic_ostream<_CharT, _Traits>& 
        -:  109:    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setiosflags __f)
        -:  110:    { 
        -:  111:      __os.setf(__f._M_mask); 
        -:  112:      return __os; 
        -:  113:    }
        -:  114:
        -:  115:
        -:  116:  struct _Setbase { int _M_base; };
        -:  117:
        -:  118:  /**
        -:  119:   *  @brief  Manipulator for @c setf.
        -:  120:   *  @param  __base  A numeric base.
        -:  121:   *
        -:  122:   *  Sent to a stream object, this manipulator changes the
        -:  123:   *  @c ios_base::basefield flags to @c oct, @c dec, or @c hex when @a base
        -:  124:   *  is 8, 10, or 16, accordingly, and to 0 if @a __base is any other value.
        -:  125:  */
        -:  126:  inline _Setbase 
        -:  127:  setbase(int __base)
        -:  128:  { return { __base }; }
        -:  129:
        -:  130:  template<typename _CharT, typename _Traits>
        -:  131:    inline basic_istream<_CharT, _Traits>& 
        -:  132:    operator>>(basic_istream<_CharT, _Traits>& __is, _Setbase __f)
        -:  133:    {
        -:  134:      __is.setf(__f._M_base ==  8 ? ios_base::oct : 
        -:  135:		__f._M_base == 10 ? ios_base::dec : 
        -:  136:		__f._M_base == 16 ? ios_base::hex : 
        -:  137:		ios_base::fmtflags(0), ios_base::basefield);
        -:  138:      return __is; 
        -:  139:    }
        -:  140:  
        -:  141:  template<typename _CharT, typename _Traits>
        -:  142:    inline basic_ostream<_CharT, _Traits>& 
        -:  143:    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)
        -:  144:    {
        -:  145:      __os.setf(__f._M_base ==  8 ? ios_base::oct : 
        -:  146:		__f._M_base == 10 ? ios_base::dec : 
        -:  147:		__f._M_base == 16 ? ios_base::hex : 
        -:  148:		ios_base::fmtflags(0), ios_base::basefield);
        -:  149:      return __os; 
        -:  150:    }
        -:  151:  
        -:  152:
        -:  153:  template<typename _CharT>
        -:  154:    struct _Setfill { _CharT _M_c; };
        -:  155:
        -:  156:  /**
        -:  157:   *  @brief  Manipulator for @c fill.
        -:  158:   *  @param  __c  The new fill character.
        -:  159:   *
        -:  160:   *  Sent to a stream object, this manipulator calls @c fill(__c) for that
        -:  161:   *  object.
        -:  162:  */
        -:  163:  template<typename _CharT>
        -:  164:    inline _Setfill<_CharT>
        -:  165:    setfill(_CharT __c)
        -:  166:    { return { __c }; }
        -:  167:
        -:  168:  template<typename _CharT, typename _Traits>
        -:  169:    inline basic_istream<_CharT, _Traits>& 
        -:  170:    operator>>(basic_istream<_CharT, _Traits>& __is, _Setfill<_CharT> __f)
        -:  171:    { 
        -:  172:      __is.fill(__f._M_c); 
        -:  173:      return __is; 
        -:  174:    }
        -:  175:
        -:  176:  template<typename _CharT, typename _Traits>
        -:  177:    inline basic_ostream<_CharT, _Traits>& 
        -:  178:    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)
        -:  179:    { 
    12047:  180:      __os.fill(__f._M_c); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0% (throw)
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
branch 25 taken 100% (fallthrough)
branch 26 taken 0% (throw)
call   27 returned 100%
branch 28 taken 100% (fallthrough)
branch 29 taken 0% (throw)
call   30 returned 100%
branch 31 taken 100% (fallthrough)
branch 32 taken 0% (throw)
        -:  181:      return __os; 
        -:  182:    }
        -:  183:
        -:  184:
        -:  185:  struct _Setprecision { int _M_n; };
        -:  186:
        -:  187:  /**
        -:  188:   *  @brief  Manipulator for @c precision.
        -:  189:   *  @param  __n  The new precision.
        -:  190:   *
        -:  191:   *  Sent to a stream object, this manipulator calls @c precision(__n) for
        -:  192:   *  that object.
        -:  193:  */
        -:  194:  inline _Setprecision 
        -:  195:  setprecision(int __n)
        -:  196:  { return { __n }; }
        -:  197:
        -:  198:  template<typename _CharT, typename _Traits>
        -:  199:    inline basic_istream<_CharT, _Traits>& 
        -:  200:    operator>>(basic_istream<_CharT, _Traits>& __is, _Setprecision __f)
        -:  201:    { 
        -:  202:      __is.precision(__f._M_n); 
        -:  203:      return __is; 
        -:  204:    }
        -:  205:
        -:  206:  template<typename _CharT, typename _Traits>
        -:  207:    inline basic_ostream<_CharT, _Traits>& 
        -:  208:    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
        -:  209:    { 
        -:  210:      __os.precision(__f._M_n); 
        -:  211:      return __os; 
        -:  212:    }
        -:  213:
        -:  214:
        -:  215:  struct _Setw { int _M_n; };
        -:  216:
        -:  217:  /**
        -:  218:   *  @brief  Manipulator for @c width.
        -:  219:   *  @param  __n  The new width.
        -:  220:   *
        -:  221:   *  Sent to a stream object, this manipulator calls @c width(__n) for
        -:  222:   *  that object.
        -:  223:  */
        -:  224:  inline _Setw 
        -:  225:  setw(int __n)
        -:  226:  { return { __n }; }
        -:  227:
        -:  228:  template<typename _CharT, typename _Traits>
        -:  229:    inline basic_istream<_CharT, _Traits>& 
        -:  230:    operator>>(basic_istream<_CharT, _Traits>& __is, _Setw __f)
        -:  231:    {
        -:  232:      __is.width(__f._M_n);
        -:  233:      return __is; 
        -:  234:    }
        -:  235:
        -:  236:  template<typename _CharT, typename _Traits>
        -:  237:    inline basic_ostream<_CharT, _Traits>& 
        -:  238:    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)
        -:  239:    {
    12359:  240:      __os.width(__f._M_n);
        -:  241:      return __os; 
        -:  242:    }
        -:  243:
        -:  244:#if __cplusplus >= 201103L
        -:  245:  
        -:  246:  template<typename _MoneyT>
        -:  247:    struct _Get_money { _MoneyT& _M_mon; bool _M_intl; };
        -:  248:
        -:  249:  /**
        -:  250:   *  @brief  Extended manipulator for extracting money.
        -:  251:   *  @param  __mon  Either long double or a specialization of @c basic_string.
        -:  252:   *  @param  __intl A bool indicating whether international format 
        -:  253:   *                 is to be used.
        -:  254:   *
        -:  255:   *  Sent to a stream object, this manipulator extracts @a __mon.
        -:  256:  */
        -:  257:  template<typename _MoneyT>
        -:  258:    inline _Get_money<_MoneyT>
        -:  259:    get_money(_MoneyT& __mon, bool __intl = false)
        -:  260:    { return { __mon, __intl }; }
        -:  261:
        -:  262:  template<typename _CharT, typename _Traits, typename _MoneyT>
        -:  263:    basic_istream<_CharT, _Traits>&
        -:  264:    operator>>(basic_istream<_CharT, _Traits>& __is, _Get_money<_MoneyT> __f)
        -:  265:    {
        -:  266:      typename basic_istream<_CharT, _Traits>::sentry __cerb(__is, false);
        -:  267:      if (__cerb)
        -:  268:	{
        -:  269:	  ios_base::iostate __err = ios_base::goodbit;
        -:  270:	  __try
        -:  271:	    {
        -:  272:	      typedef istreambuf_iterator<_CharT, _Traits>   _Iter;
        -:  273:	      typedef money_get<_CharT, _Iter>               _MoneyGet;
        -:  274:
        -:  275:	      const _MoneyGet& __mg = use_facet<_MoneyGet>(__is.getloc());
        -:  276:	      __mg.get(_Iter(__is.rdbuf()), _Iter(), __f._M_intl,
        -:  277:		       __is, __err, __f._M_mon);
        -:  278:	    }
        -:  279:	  __catch(__cxxabiv1::__forced_unwind&)
        -:  280:	    {
        -:  281:	      __is._M_setstate(ios_base::badbit);
        -:  282:	      __throw_exception_again;
        -:  283:	    }
        -:  284:	  __catch(...)
        -:  285:	    { __is._M_setstate(ios_base::badbit); }
        -:  286:	  if (__err)
        -:  287:	    __is.setstate(__err);
        -:  288:	}
        -:  289:      return __is; 
        -:  290:    }
        -:  291:
        -:  292:
        -:  293:  template<typename _MoneyT>
        -:  294:    struct _Put_money { const _MoneyT& _M_mon; bool _M_intl; };
        -:  295:
        -:  296:  /**
        -:  297:   *  @brief  Extended manipulator for inserting money.
        -:  298:   *  @param  __mon  Either long double or a specialization of @c basic_string.
        -:  299:   *  @param  __intl A bool indicating whether international format 
        -:  300:   *                 is to be used.
        -:  301:   *
        -:  302:   *  Sent to a stream object, this manipulator inserts @a __mon.
        -:  303:  */
        -:  304:  template<typename _MoneyT>
        -:  305:    inline _Put_money<_MoneyT>
        -:  306:    put_money(const _MoneyT& __mon, bool __intl = false)
        -:  307:    { return { __mon, __intl }; }
        -:  308:
        -:  309:  template<typename _CharT, typename _Traits, typename _MoneyT>
        -:  310:    basic_ostream<_CharT, _Traits>& 
        -:  311:    operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_money<_MoneyT> __f)
        -:  312:    {
        -:  313:      typename basic_ostream<_CharT, _Traits>::sentry __cerb(__os);
        -:  314:      if (__cerb)
        -:  315:	{
        -:  316:	  ios_base::iostate __err = ios_base::goodbit;
        -:  317:	  __try
        -:  318:	    {
        -:  319:	      typedef ostreambuf_iterator<_CharT, _Traits>   _Iter;
        -:  320:	      typedef money_put<_CharT, _Iter>               _MoneyPut;
        -:  321:
        -:  322:	      const _MoneyPut& __mp = use_facet<_MoneyPut>(__os.getloc());
        -:  323:	      if (__mp.put(_Iter(__os.rdbuf()), __f._M_intl, __os,
        -:  324:			   __os.fill(), __f._M_mon).failed())
        -:  325:		__err |= ios_base::badbit;
        -:  326:	    }
        -:  327:	  __catch(__cxxabiv1::__forced_unwind&)
        -:  328:	    {
        -:  329:	      __os._M_setstate(ios_base::badbit);
        -:  330:	      __throw_exception_again;
        -:  331:	    }
        -:  332:	  __catch(...)
        -:  333:	    { __os._M_setstate(ios_base::badbit); }
        -:  334:	  if (__err)
        -:  335:	    __os.setstate(__err);
        -:  336:	}
        -:  337:      return __os; 
        -:  338:    }
        -:  339:
        -:  340:#if __cplusplus > 201103L
        -:  341:
        -:  342:#define __cpp_lib_quoted_string_io 201304
        -:  343:
        -:  344:_GLIBCXX_END_NAMESPACE_VERSION
        -:  345:  namespace __detail {
        -:  346:  _GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:  347:
        -:  348:    /**
        -:  349:     * @brief Struct for delimited strings.
        -:  350:     */
        -:  351:    template<typename _String, typename _CharT>
        -:  352:      struct _Quoted_string
        -:  353:      {
        -:  354:	static_assert(is_reference<_String>::value
        -:  355:		   || is_pointer<_String>::value,
        -:  356:		      "String type must be pointer or reference");
        -:  357:
        -:  358:	_Quoted_string(_String __str, _CharT __del, _CharT __esc)
        -:  359:	: _M_string(__str), _M_delim{__del}, _M_escape{__esc}
        -:  360:	{ }
        -:  361:
        -:  362:	_Quoted_string&
        -:  363:	operator=(_Quoted_string&) = delete;
        -:  364:
        -:  365:	_String _M_string;
        -:  366:	_CharT _M_delim;
        -:  367:	_CharT _M_escape;
        -:  368:      };
        -:  369:
        -:  370:    /**
        -:  371:     * @brief Inserter for quoted strings.
        -:  372:     *
        -:  373:     *  _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  374:     *  DR 2344 quoted()'s interaction with padding is unclear
        -:  375:     */
        -:  376:    template<typename _CharT, typename _Traits>
        -:  377:      auto&
        -:  378:      operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        -:  379:		 const _Quoted_string<const _CharT*, _CharT>& __str)
        -:  380:      {
        -:  381:	std::basic_ostringstream<_CharT, _Traits> __ostr;
        -:  382:	__ostr << __str._M_delim;
        -:  383:	for (const _CharT* __c = __str._M_string; *__c; ++__c)
        -:  384:	  {
        -:  385:	    if (*__c == __str._M_delim || *__c == __str._M_escape)
        -:  386:	      __ostr << __str._M_escape;
        -:  387:	    __ostr << *__c;
        -:  388:	  }
        -:  389:	__ostr << __str._M_delim;
        -:  390:
        -:  391:	return __os << __ostr.str();
        -:  392:      }
        -:  393:
        -:  394:    /**
        -:  395:     * @brief Inserter for quoted strings.
        -:  396:     *
        -:  397:     *  _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  398:     *  DR 2344 quoted()'s interaction with padding is unclear
        -:  399:     */
        -:  400:    template<typename _CharT, typename _Traits, typename _String>
        -:  401:      auto&
        -:  402:      operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        -:  403:		 const _Quoted_string<_String, _CharT>& __str)
        -:  404:      {
        -:  405:	std::basic_ostringstream<_CharT, _Traits> __ostr;
        -:  406:	__ostr << __str._M_delim;
        -:  407:	for (auto& __c : __str._M_string)
        -:  408:	  {
        -:  409:	    if (__c == __str._M_delim || __c == __str._M_escape)
        -:  410:	      __ostr << __str._M_escape;
        -:  411:	    __ostr << __c;
        -:  412:	  }
        -:  413:	__ostr << __str._M_delim;
        -:  414:
        -:  415:	return __os << __ostr.str();
        -:  416:      }
        -:  417:
        -:  418:    /**
        -:  419:     * @brief Extractor for delimited strings.
        -:  420:     *        The left and right delimiters can be different.
        -:  421:     */
        -:  422:    template<typename _CharT, typename _Traits, typename _Alloc>
        -:  423:      auto&
        -:  424:      operator>>(std::basic_istream<_CharT, _Traits>& __is,
        -:  425:		 const _Quoted_string<basic_string<_CharT, _Traits, _Alloc>&,
        -:  426:				      _CharT>& __str)
        -:  427:      {
        -:  428:	_CharT __c;
        -:  429:	__is >> __c;
        -:  430:	if (!__is.good())
        -:  431:	  return __is;
        -:  432:	if (__c != __str._M_delim)
        -:  433:	  {
        -:  434:	    __is.unget();
        -:  435:	    __is >> __str._M_string;
        -:  436:	    return __is;
        -:  437:	  }
        -:  438:	__str._M_string.clear();
        -:  439:	std::ios_base::fmtflags __flags
        -:  440:	  = __is.flags(__is.flags() & ~std::ios_base::skipws);
        -:  441:	do
        -:  442:	  {
        -:  443:	    __is >> __c;
        -:  444:	    if (!__is.good())
        -:  445:	      break;
        -:  446:	    if (__c == __str._M_escape)
        -:  447:	      {
        -:  448:		__is >> __c;
        -:  449:		if (!__is.good())
        -:  450:		  break;
        -:  451:	      }
        -:  452:	    else if (__c == __str._M_delim)
        -:  453:	      break;
        -:  454:	    __str._M_string += __c;
        -:  455:	  }
        -:  456:	while (true);
        -:  457:	__is.setf(__flags);
        -:  458:
        -:  459:	return __is;
        -:  460:      }
        -:  461:  _GLIBCXX_END_NAMESPACE_VERSION
        -:  462:  } // namespace __detail
        -:  463:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:  464:
        -:  465:  /**
        -:  466:   * @brief Manipulator for quoted strings.
        -:  467:   * @param __str    String to quote.
        -:  468:   * @param __delim  Character to quote string with.
        -:  469:   * @param __escape Escape character to escape itself or quote character.
        -:  470:   */
        -:  471:  template<typename _CharT>
        -:  472:    inline auto
        -:  473:    quoted(const _CharT* __string,
        -:  474:	   _CharT __delim = _CharT('"'), _CharT __escape = _CharT('\\'))
        -:  475:    {
        -:  476:      return __detail::_Quoted_string<const _CharT*, _CharT>(__string, __delim,
        -:  477:							     __escape);
        -:  478:    }
        -:  479:
        -:  480:  template<typename _CharT, typename _Traits, typename _Alloc>
        -:  481:    inline auto
        -:  482:    quoted(const basic_string<_CharT, _Traits, _Alloc>& __string,
        -:  483:	   _CharT __delim = _CharT('"'), _CharT __escape = _CharT('\\'))
        -:  484:    {
        -:  485:      return __detail::_Quoted_string<
        -:  486:			const basic_string<_CharT, _Traits, _Alloc>&, _CharT>(
        -:  487:				__string, __delim, __escape);
        -:  488:    }
        -:  489:
        -:  490:  template<typename _CharT, typename _Traits, typename _Alloc>
        -:  491:    inline auto
        -:  492:    quoted(basic_string<_CharT, _Traits, _Alloc>& __string,
        -:  493:	   _CharT __delim = _CharT('"'), _CharT __escape = _CharT('\\'))
        -:  494:    {
        -:  495:      return __detail::_Quoted_string<
        -:  496:			basic_string<_CharT, _Traits, _Alloc>&, _CharT>(
        -:  497:				__string, __delim, __escape);
        -:  498:    }
        -:  499:
        -:  500:#endif // __cplusplus > 201103L
        -:  501:
        -:  502:#endif // __cplusplus >= 201103L
        -:  503:
        -:  504:  // Inhibit implicit instantiations for required instantiations,
        -:  505:  // which are defined via explicit instantiations elsewhere.  
        -:  506:  // NB:  This syntax is a GNU extension.
        -:  507:#if _GLIBCXX_EXTERN_TEMPLATE
        -:  508:  extern template ostream& operator<<(ostream&, _Setfill<char>);
        -:  509:  extern template ostream& operator<<(ostream&, _Setiosflags);
        -:  510:  extern template ostream& operator<<(ostream&, _Resetiosflags);
        -:  511:  extern template ostream& operator<<(ostream&, _Setbase);
        -:  512:  extern template ostream& operator<<(ostream&, _Setprecision);
        -:  513:  extern template ostream& operator<<(ostream&, _Setw);
        -:  514:  extern template istream& operator>>(istream&, _Setfill<char>);
        -:  515:  extern template istream& operator>>(istream&, _Setiosflags);
        -:  516:  extern template istream& operator>>(istream&, _Resetiosflags);
        -:  517:  extern template istream& operator>>(istream&, _Setbase);
        -:  518:  extern template istream& operator>>(istream&, _Setprecision);
        -:  519:  extern template istream& operator>>(istream&, _Setw);
        -:  520:
        -:  521:#ifdef _GLIBCXX_USE_WCHAR_T
        -:  522:  extern template wostream& operator<<(wostream&, _Setfill<wchar_t>);
        -:  523:  extern template wostream& operator<<(wostream&, _Setiosflags);
        -:  524:  extern template wostream& operator<<(wostream&, _Resetiosflags);
        -:  525:  extern template wostream& operator<<(wostream&, _Setbase);
        -:  526:  extern template wostream& operator<<(wostream&, _Setprecision);
        -:  527:  extern template wostream& operator<<(wostream&, _Setw);
        -:  528:  extern template wistream& operator>>(wistream&, _Setfill<wchar_t>);
        -:  529:  extern template wistream& operator>>(wistream&, _Setiosflags);
        -:  530:  extern template wistream& operator>>(wistream&, _Resetiosflags);
        -:  531:  extern template wistream& operator>>(wistream&, _Setbase);
        -:  532:  extern template wistream& operator>>(wistream&, _Setprecision);
        -:  533:  extern template wistream& operator>>(wistream&, _Setw);
        -:  534:#endif
        -:  535:#endif
        -:  536:
        -:  537:_GLIBCXX_END_NAMESPACE_VERSION
        -:  538:} // namespace
        -:  539:
        -:  540:#endif /* _GLIBCXX_IOMANIP */
